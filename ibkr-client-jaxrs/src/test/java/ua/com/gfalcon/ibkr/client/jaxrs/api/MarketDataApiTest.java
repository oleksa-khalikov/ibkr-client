/*
 * MIT License
 *
 * Copyright (c) 2015-2022 Oleksii Khalikov
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * Client Portal Web API
 * Client Poral Web API
 * <p>
 * OpenAPI spec version: 1.0.0
 * <p>
 * <p>
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 * <p>
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * <p>
 * http://www.apache.org/licenses/LICENSE-2.0
 * <p>
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package ua.com.gfalcon.ibkr.client.jaxrs.api;

import java.util.ArrayList;
import java.util.List;

import org.apache.cxf.jaxrs.client.ClientConfiguration;
import org.apache.cxf.jaxrs.client.JAXRSClientFactory;
import org.apache.cxf.jaxrs.client.WebClient;
import org.junit.Before;
import org.junit.Test;

import com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider;

import ua.com.gfalcon.ibkr.client.jaxrs.api.MarketDataApi;
import ua.com.gfalcon.ibkr.model.ApiException;


/**
 * Client Portal Web API
 *
 * <p>Client Poral Web API
 * <p>
 * API tests for MarketDataApi
 */
public class MarketDataApiTest {


    private MarketDataApi api;

    /**
     * Market Data Cancel (Single)
     * <p>
     * Cancel market data for given conid. To cancel all market data request(s), see /iserver/marketdata/unsubscribeall.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void iserverMarketdataConidUnsubscribeGetTest() {
        String conid = null;
        //Object response = api.iserverMarketdataConidUnsubscribeGet(conid);
        //assertNotNull(response);
        // TODO: test validations


    }

    /**
     * Market Data History
     * <p>
     * Get historical market Data for given conid, length of data is controlled by &#39;period&#39; and &#39;bar&#39;. Formatted as: min&#x3D;minute, h&#x3D;hour, d&#x3D;day, w&#x3D;week, m&#x3D;month, y&#x3D;year e.g. period &#x3D;1y with bar &#x3D;1w returns 52 data points (Max of 1000 data points supported). **Note**: There&#39;s a limit of 5 concurrent requests. Excessive requests will return a &#39;Too many requests&#39; status 429 response.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void iserverMarketdataHistoryGetTest() {
        String conid = null;
        String period = null;
        String exchange = null;
        String bar = null;
        Boolean outsideRth = null;
        //HistoryData response = api.iserverMarketdataHistoryGet(conid, period, exchange, bar, outsideRth);
        //assertNotNull(response);
        // TODO: test validations


    }

    /**
     * Market Data
     * <p>
     * Get Market Data for the given conid(s). The endpoint will return by default bid, ask, last, change, change pct, close, listing exchange. See response fields for a list of available fields that can be request via fields argument. The endpoint /iserver/accounts must be called prior to /iserver/marketdata/snapshot. For derivative contracts the endpoint /iserver/secdef/search must be called first.  If you call any other endpoints that relays back market data for the same contract, such as /iserver/contract/rules then you must query market data again to ensure all fields are properly returned.  First /snapshot endpoint call for given conid will initiate the market data request.  To receive all available fields the /snapshot endpoint will need to be called several times. To receive streaming market data the endpoint /ws can be used. Refer to [Streaming WebSocket Data](https://interactivebrokers.github.io/cpwebapi/RealtimeSubscription.html) for details.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void iserverMarketdataSnapshotGetTest() {
        String conids = null;
        Integer since = null;
        String fields = null;
        //List<Object> response = api.iserverMarketdataSnapshotGet(conids, since, fields);
        //assertNotNull(response);
        // TODO: test validations


    }

    /**
     * Market Data Cancel (All)
     * <p>
     * Cancel all market data request(s). To cancel market data for given conid, see /iserver/marketdata/{conid}/unsubscribe.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void iserverMarketdataUnsubscribeallGetTest() {
        //Object response = api.iserverMarketdataUnsubscribeallGet();
        //assertNotNull(response);
        // TODO: test validations


    }

    /**
     * Market Data Snapshot (Beta)
     * <p>
     * Get a snapshot of Market Data for the given conid(s).See response for a list of available fields that can be requested from the fields argument. Must be connected to a brokerage session before can query snapshot data. First /snapshot endpoint call for given conid(s) will initiate the market data request, make an additional request to receive field values back. To receive all available fields the /snapshot endpoint will need to be called several times. To receive streaming market data the endpoint /ws can be used. Refer to [Streaming WebSocket Data](https://interactivebrokers.github.io/cpwebapi/RealtimeSubscription.html) for details.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mdSnapshotGetTest() {
        String conids = null;
        String fields = null;
        //MarketData response = api.mdSnapshotGet(conids, fields);
        //assertNotNull(response);
        // TODO: test validations


    }

    @Before
    public void setup() {
        JacksonJsonProvider provider = new JacksonJsonProvider();
        List providers = new ArrayList();
        providers.add(provider);

        api = JAXRSClientFactory.create("https://localhost:5000/v1/api", MarketDataApi.class, providers);
        org.apache.cxf.jaxrs.client.Client client = WebClient.client(api);

        ClientConfiguration config = WebClient.getConfig(client);
    }

}
