/*
 * MIT License
 *
 * Copyright (c) 2015-2022 Oleksii Khalikov
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * Client Portal Web API
 * Client Poral Web API
 * <p>
 * OpenAPI spec version: 1.0.0
 * <p>
 * <p>
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 * <p>
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * <p>
 * http://www.apache.org/licenses/LICENSE-2.0
 * <p>
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package ua.com.gfalcon.ibkr.client.jaxrs.api;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

import org.apache.cxf.jaxrs.client.ClientConfiguration;
import org.apache.cxf.jaxrs.client.JAXRSClientFactory;
import org.apache.cxf.jaxrs.client.WebClient;
import org.junit.Before;
import org.junit.Test;

import com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider;

import ua.com.gfalcon.ibkr.client.jaxrs.api.CcpBetaApi;
import ua.com.gfalcon.ibkr.model.Auth;


/**
 * Client Portal Web API
 *
 * <p>Client Poral Web API
 * <p>
 * API tests for CcpBetaApi
 */
public class CcpBetaApiTest {


    private CcpBetaApi api;

    /**
     * Brokerage Accounts
     * <p>
     * Provides the list of tradeable accounts
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ccpAccountGetTest() {
        //Object response = api.ccpAccountGet();
        //assertNotNull(response);
        // TODO: test validations


    }

    /**
     * Start CCP Session
     * <p>
     * Initiate a brokerage session to CCP. Only one brokerage session type can run at a time. If an existing brokerage session to iServer is running then call the endpoint /logout first. Note at this time only order management is possible from CCP session, market data and scanner endpoints can&#39;t be used since they are only available from iServer session. Work is in progress to provide new CCP endpoints for market data and scanners.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ccpAuthInitPostTest() {
        Boolean compete = null;
        String locale = null;
        String mac = null;
        String machineId = null;
        String username = null;
        //Object response = api.ccpAuthInitPost(compete, locale, mac, machineId, username);
        //assertNotNull(response);
        // TODO: test validations


    }

    /**
     * Complete CCP Session
     * <p>
     * Session Token Authentication
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ccpAuthResponsePostTest() {
        Auth auth = null;
        //Object response = api.ccpAuthResponsePost(auth);
        //assertNotNull(response);
        // TODO: test validations


    }

    /**
     * Delete Order
     * <p>
     * Sends an Order cancellation request. The status of the order can be queried through /ccp/order. Passing arguments as GET is also supported (requires passing action&#x3D;delete) (GET is meant for development only)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ccpOrderDeleteTest() {
        String acct = null;
        BigDecimal id = null;
        //OrderData response = api.ccpOrderDelete(acct, id);
        //assertNotNull(response);
        // TODO: test validations


    }

    /**
     * Submit Order
     * <p>
     * Submits an Order.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ccpOrderPostTest() {
        String acct = null;
        BigDecimal conid = null;
        String ccy = null;
        String exchange = null;
        BigDecimal qty = null;
        String type = null;
        String side = null;
        BigDecimal price = null;
        String tif = null;
        //OrderData response = api.ccpOrderPost(acct, conid, ccy, exchange, qty, type, side, price, tif);
        //assertNotNull(response);
        // TODO: test validations


    }

    /**
     * Update Order
     * <p>
     * Updates an Order. Updating an order requires the same arguments as placing an order besides the conid. Note: The status of the order can be queried through GET /ccp/order.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ccpOrderPutTest() {
        String acct = null;
        BigDecimal id = null;
        //OrderData response = api.ccpOrderPut(acct, id);
        //assertNotNull(response);
        // TODO: test validations


    }

    /**
     * Order Status
     * <p>
     * Get status for all orders
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ccpOrdersGetTest() {
        String acct = null;
        Boolean cancelled = null;
        //Object response = api.ccpOrdersGet(acct, cancelled);
        //assertNotNull(response);
        // TODO: test validations


    }

    /**
     * Positions
     * <p>
     * List of positions
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ccpPositionsGetTest() {
        //PositionData response = api.ccpPositionsGet();
        //assertNotNull(response);
        // TODO: test validations


    }

    /**
     * CCP Status
     * <p>
     * Provide the current CCP session status. When using the Gateway this endpoint will also initiate a brokerage session to CCP by sending /auth/init and response.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ccpStatusGetTest() {
        //Object response = api.ccpStatusGet();
        //assertNotNull(response);
        // TODO: test validations


    }

    /**
     * Trades
     * <p>
     * Get a list of Trades, by default, the list is from today midnight to Date.now().
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ccpTradesGetTest() {
        String from = null;
        String to = null;
        //Object response = api.ccpTradesGet(from, to);
        //assertNotNull(response);
        // TODO: test validations


    }

    @Before
    public void setup() {
        JacksonJsonProvider provider = new JacksonJsonProvider();
        List providers = new ArrayList();
        providers.add(provider);

        api = JAXRSClientFactory.create("https://localhost:5000/v1/api", CcpBetaApi.class, providers);
        org.apache.cxf.jaxrs.client.Client client = WebClient.client(api);

        ClientConfiguration config = WebClient.getConfig(client);
    }

}
