/*
 * MIT License
 *
 * Copyright (c) 2015-2022 Oleksii Khalikov
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.27).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

package ua.com.gfalcon.ibkr.server.spring.api;

import java.util.List;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;

import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import ua.com.gfalcon.ibkr.model.CertainSubscription;
import ua.com.gfalcon.ibkr.model.DeviceOption;
import ua.com.gfalcon.ibkr.model.Notifications;

/**
 * Fyi Api.
 */
@Validated
@Api(value = "fyi", description = "the fyi API")
@RequestMapping(value = "/v1/api")
public interface FyiApi {

    @ApiOperation(
            value = "Delete a device", nickname = "fyiDeliveryoptionsDeviceIdDelete", notes = "",
            response = Object.class, tags = {"FYI"})
    @ApiResponses(value = {@ApiResponse(code = 200, message = "200 means successful", response = Object.class)})
    @RequestMapping(
            value = "/fyi/deliveryoptions/{deviceId}", produces = {"application/json"}, method = RequestMethod.DELETE)
    ResponseEntity<Object> fyiDeliveryoptionsDeviceIdDelete(
            @ApiParam(value = "device ID", required = true) @PathVariable("deviceId") String deviceId);


    @ApiOperation(
            value = "Enable/Disable device option", nickname = "fyiDeliveryoptionsDevicePost", notes = "",
            response = Object.class, tags = {"FYI"})
    @ApiResponses(value = {@ApiResponse(code = 200, message = "200 means successful", response = Object.class)})
    @RequestMapping(value = "/fyi/deliveryoptions/device", produces = {"application/json"}, method = RequestMethod.POST)
    ResponseEntity<Object> fyiDeliveryoptionsDevicePost(
            @ApiParam(value = "device info", required = true) @Valid @RequestBody DeviceOption body);


    @ApiOperation(
            value = "Enable/Disable email option", nickname = "fyiDeliveryoptionsEmailPut", notes = "",
            response = Object.class, tags = {"FYI"})
    @ApiResponses(value = {@ApiResponse(code = 200, message = "200 means successful", response = Object.class)})
    @RequestMapping(value = "/fyi/deliveryoptions/email", produces = {"application/json"}, method = RequestMethod.PUT)
    ResponseEntity<Object> fyiDeliveryoptionsEmailPut(
            @NotNull @ApiParam(value = "true/false", required = true) @Valid @RequestParam(
                    value = "enabled", required = true) String enabled);


    @ApiOperation(
            value = "Get delivery options", nickname = "fyiDeliveryoptionsGet",
            notes = "options for sending fyis to email and other devices ", response = Object.class, tags = {"FYI"})
    @ApiResponses(value = {@ApiResponse(code = 200, message = "An object", response = Object.class)})
    @RequestMapping(value = "/fyi/deliveryoptions", produces = {"application/json"}, method = RequestMethod.GET)
    ResponseEntity<Object> fyiDeliveryoptionsGet();


    @ApiOperation(
            value = "Get disclaimer for a certain kind of fyi", nickname = "fyiDisclaimerTypecodeGet", notes = "",
            response = Object.class, tags = {"FYI"})
    @ApiResponses(
            value = {@ApiResponse(
                    code = 200, message = "receives the disclaimer message", response = Object.class)})
    @RequestMapping(value = "/fyi/disclaimer/{typecode}", produces = {"application/json"}, method = RequestMethod.GET)
    ResponseEntity<Object> fyiDisclaimerTypecodeGet(@ApiParam(
            value = "fyi code, for example --M8, EA", required = true) @PathVariable("typecode") String typecode);


    @ApiOperation(
            value = "Mark disclaimer read", nickname = "fyiDisclaimerTypecodePut", notes = "", response = Object.class,
            tags = {"FYI"})
    @ApiResponses(value = {@ApiResponse(code = 200, message = "200 means successful", response = Object.class)})
    @RequestMapping(value = "/fyi/disclaimer/{typecode}", produces = {"application/json"}, method = RequestMethod.PUT)
    ResponseEntity<Object> fyiDisclaimerTypecodePut(@ApiParam(
            value = "fyi code, for example --M8, EA", required = true) @PathVariable("typecode") String typecode);


    @ApiOperation(
            value = "Get a list of notifications", nickname = "fyiNotificationsGet", notes = "",
            response = Notifications.class, tags = {"FYI"})
    @ApiResponses(value = {@ApiResponse(code = 200, message = "An array", response = Notifications.class)})
    @RequestMapping(value = "/fyi/notifications", produces = {"application/json"}, method = RequestMethod.GET)
    ResponseEntity<Notifications> fyiNotificationsGet(@NotNull @ApiParam(
            value = "max number of fyis in response", required = true) @Valid
            @RequestParam(value = "max", required = true) String max,
            @ApiParam(value = "if set, don't set include") @Valid @RequestParam(
                    value = "exclude", required = false) String exclude,
            @ApiParam(value = "if set, don't set exclude") @Valid @RequestParam(
                    value = "include", required = false) String include);


    @ApiOperation(
            value = "Get more notifications based on a certain one", nickname = "fyiNotificationsMoreGet", notes = "",
            response = Notifications.class, tags = {"FYI"})
    @ApiResponses(value = {@ApiResponse(code = 200, message = "An array", response = Notifications.class)})
    @RequestMapping(value = "/fyi/notifications/more", produces = {"application/json"}, method = RequestMethod.GET)
    ResponseEntity<Notifications> fyiNotificationsMoreGet(
            @NotNull @ApiParam(value = "id of last notification in the list", required = true) @Valid @RequestParam(
                    value = "id", required = true) String id);


    @ApiOperation(
            value = "Get a list of notifications", nickname = "fyiNotificationsNotificationIdPut", notes = "",
            response = Object.class, tags = {"FYI"})
    @ApiResponses(
            value = {@ApiResponse(
                    code = 200, message = "when 200 receives, it means successful", response = Object.class)})
    @RequestMapping(
            value = "/fyi/notifications/{notificationId}", produces = {"application/json"}, method = RequestMethod.PUT)
    ResponseEntity<Object> fyiNotificationsNotificationIdPut(@ApiParam(
            value = "mark a notification read", required = true) @PathVariable("notificationId") String notificationId);


    @ApiOperation(
            value = "Get a list of subscriptions", nickname = "fyiSettingsGet",
            notes = "Return the current choices of subscriptions, we can toggle the option ", response = Object.class,
            responseContainer = "List", tags = {"FYI"})
    @ApiResponses(
            value = {@ApiResponse(
                    code = 200, message = "An array", response = Object.class, responseContainer = "List")})
    @RequestMapping(value = "/fyi/settings", produces = {"application/json"}, method = RequestMethod.GET)
    ResponseEntity<List<Object>> fyiSettingsGet();


    @ApiOperation(
            value = "Enable/Disable certain subscription", nickname = "fyiSettingsTypecodePost",
            notes = "Configure which typecode you would like to enable/disable. ", response = Object.class,
            tags = {"FYI"})
    @ApiResponses(value = {@ApiResponse(code = 200, message = "200 means successful", response = Object.class)})
    @RequestMapping(value = "/fyi/settings/{typecode}", produces = {"application/json"}, method = RequestMethod.POST)
    ResponseEntity<Object> fyiSettingsTypecodePost(
            @ApiParam(value = "fyi code", required = true) @PathVariable("typecode") String typecode,
            @ApiParam(value = "", required = true) @Valid @RequestBody CertainSubscription body);


    @ApiOperation(
            value = "Get unread number of fyis. The HTTP method POST is also supported.",
            nickname = "fyiUnreadnumberGet", notes = "Returns the total number of unread fyis ",
            response = Object.class, tags = {"FYI"})
    @ApiResponses(value = {@ApiResponse(code = 200, message = "An object", response = Object.class)})
    @RequestMapping(value = "/fyi/unreadnumber", produces = {"application/json"}, method = RequestMethod.GET)
    ResponseEntity<Object> fyiUnreadnumberGet();

}
