/*
 *   Copyright 2016-2022 Oleksii V. KHALIKOV
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.27).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

package ua.com.gfalcon.ibkr.server.spring.api;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;

import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import ua.com.gfalcon.ibkr.model.MarketData;

/**
 * MD API.
 */
@Validated
@Api(value = "md", description = "the md API")
@RequestMapping(value = "/v1/api")
public interface MdApi {

    @ApiOperation(
            value = "Market Data Snapshot (Beta)", nickname = "mdSnapshotGet",
            notes = "Get a snapshot of Market Data for the given conid(s).See response for a list of available fields"
                    + " that can be requested from the fields argument. Must be connected to a brokerage session"
                    + " before can query snapshot data. First /snapshot endpoint call for given conid(s) will"
                    + " initiate the market data request, make an additional request to receive field values back."
                    + " To receive all available fields the /snapshot endpoint will need to be called several times."
                    + " To receive streaming market data the endpoint /ws can be used."
                    + " Refer to [Streaming WebSocket Data]"
                    + "(https://interactivebrokers.github.io/cpwebapi/RealtimeSubscription.html) for details. ",
            response = MarketData.class, tags = {"Market Data"})
    @ApiResponses(
            value = {@ApiResponse(code = 200, message = "An Object", response = MarketData.class), @ApiResponse(
                    code = 401, message = "Authentication failed"), @ApiResponse(
                    code = 500, message = "System failed")})
    @RequestMapping(value = "/md/snapshot", produces = {"application/json"}, method = RequestMethod.GET)
    ResponseEntity<MarketData> mdSnapshotGet(@NotNull @ApiParam(
            value = "List of conids comma separated. Optional exchange and instrument type can be specified."
                    + "   * conid: IBKR Contract Identifier"
                    + "   * exchange: Exchange or venue"
                    + "   * instrType: Instrument Type supported values: CS (Stocks), OPT (Options), FUT (Futures),"
                    + " FOP (Future Options), WAR (Warrants), BOND (Bonds), FUND (Mutual Funds), CASH (Forex),"
                    + " CFD (Contract for difference), IND (Index) ",
            required = true, allowableValues = "conid@exchange:instrType") @Valid @RequestParam(
            value = "conids", required = true) String conids,
            @ApiParam(value = "list of fields separated by comma 31,84,85,86,88") @Valid @RequestParam(
                    value = "fields", required = false) String fields);

}
