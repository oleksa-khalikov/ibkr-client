/*
 * MIT License
 *
 * Copyright (c) 2015-2022 Oleksii Khalikov
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/*
 * Client Portal Web API
 * Client Poral Web API
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package ua.com.gfalcon.ibkr.client.okhttp.api;

import org.junit.Ignore;
import org.junit.Test;

import ua.com.gfalcon.ibkr.model.AuthStatus;
import ua.com.gfalcon.ibkr.model.BooleanConfirmed;
import ua.com.gfalcon.ibkr.model.ValidateSso;

/**
 * API tests for SessionApi
 */
@Ignore
public class SessionApiTest {

    private final SessionApi api = new SessionApi();


    /**
     * Authentication Status
     * <p/>
     * Current Authentication status to the Brokerage system. Market Data and Trading is not possible if not
     * authenticated, e.g. authenticated shows false
     *
     * @throws Exception if the Api call fails
     */
    @Test
    public void iserverAuthStatusPostTest() throws Exception {
        AuthStatus response = api.iserverAuthStatusPost();

        // TODO: test validations
    }

    /**
     * Tries to re-authenticate to Brokerage
     * <p/>
     * When using the CP Gateway, this endpoint provides a way to reauthenticate to the Brokerage system as long as
     * there is a valid SSO session, see /sso/validate.
     *
     * @throws Exception if the Api call fails
     */
    @Test
    public void iserverReauthenticatePostTest() throws Exception {
        AuthStatus response = api.iserverReauthenticatePost();

        // TODO: test validations
    }

    /**
     * Ends the current session
     * <p/>
     * Logs the user out of the gateway session. Any further activity requires re-authentication.
     *
     * @throws Exception if the Api call fails
     */
    @Test
    public void logoutPostTest() throws Exception {
        BooleanConfirmed response = api.logoutPost();

        // TODO: test validations
    }

    /**
     * Validate SSO
     * <p/>
     * Validates the current session for the SSO user
     *
     * @throws Exception if the Api call fails
     */
    @Test
    public void ssoValidateGetTest() throws Exception {
        ValidateSso response = api.ssoValidateGet();

        // TODO: test validations
    }

    /**
     * Ping the server to keep the session open
     * <p/>
     * If the gateway has not received any requests for several minutes an open session will automatically timeout. The
     * tickle endpoint pings the server to prevent the session from ending.
     *
     * @throws Exception if the Api call fails
     */
    @Test
    public void ticklePostTest() throws Exception {
        api.ticklePost();

        // TODO: test validations
    }

}
