/*
 * MIT License
 *
 * Copyright (c) 2015-2022 Oleksii Khalikov
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/*
 * Client Portal Web API
 * Client Poral Web API
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package ua.com.gfalcon.ibkr.client.okhttp.api;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.reflect.TypeToken;

import ua.com.gfalcon.ibkr.client.okhttp.ApiCallback;
import ua.com.gfalcon.ibkr.client.okhttp.ApiClient;
import ua.com.gfalcon.ibkr.client.okhttp.ApiException;
import ua.com.gfalcon.ibkr.client.okhttp.ApiResponse;
import ua.com.gfalcon.ibkr.client.okhttp.Configuration;
import ua.com.gfalcon.ibkr.client.okhttp.Pair;
import ua.com.gfalcon.ibkr.client.okhttp.ProgressRequestBody;
import ua.com.gfalcon.ibkr.client.okhttp.ProgressResponseBody;
import ua.com.gfalcon.ibkr.model.Body;
import ua.com.gfalcon.ibkr.model.ConIdRequest;
import ua.com.gfalcon.ibkr.model.Conid;
import ua.com.gfalcon.ibkr.model.Contract;
import ua.com.gfalcon.ibkr.model.Secdef;
import ua.com.gfalcon.ibkr.model.SecdefInfo;
import ua.com.gfalcon.ibkr.model.Symbol;

/**
 * Contract Api.
 */
public class ContractApi {

    private ApiClient apiClient;

    public ContractApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ContractApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * IB Algo Params
     * Returns supported IB Algos for contract. Must be called a second time to query the list of available parameters.
     *
     * @param conid          IBKR contract identifier (required)
     * @param algos          List of algo ids delimited by \&quot;;\&quot; to filter by. Max of 8 algos ids can be
     *                       specified. (optional)
     * @param addDescription Whether or not to add algo descriptions to response. Set to 1 for yes, 0 for no. (optional)
     * @param addParams      Whether or not to show algo parameters.  Set to 1 for yes, 0 for no. (optional)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Object> iserverContractConidAlgosGet(String conid, String algos, String addDescription,
            String addParams) throws ApiException {
        ApiResponse<List<Object>> resp = iserverContractConidAlgosGetWithHttpInfo(conid, algos, addDescription,
                addParams);
        return resp.getData();
    }

    /**
     * IB Algo Params
     * Returns supported IB Algos for contract. Must be called a second time to query the list of available parameters.
     *
     * @param conid          IBKR contract identifier (required)
     * @param algos          List of algo ids delimited by \&quot;;\&quot; to filter by. Max of 8 algos ids can be
     *                       specified. (optional)
     * @param addDescription Whether or not to add algo descriptions to response. Set to 1 for yes, 0 for no. (optional)
     * @param addParams      Whether or not to show algo parameters.  Set to 1 for yes, 0 for no. (optional)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Object>> iserverContractConidAlgosGetWithHttpInfo(String conid, String algos,
            String addDescription, String addParams) throws ApiException {
        com.squareup.okhttp.Call call = iserverContractConidAlgosGetValidateBeforeCall(conid, algos, addDescription,
                addParams, null, null);
        Type localVarReturnType = new TypeToken<List<Object>>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call iserverContractConidAlgosGetValidateBeforeCall(String conid, String algos,
            String addDescription, String addParams, final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'conid' is set
        if (conid == null) {
            throw new ApiException(
                    "Missing the required parameter 'conid' when calling iserverContractConidAlgosGet(Async)");
        }


        com.squareup.okhttp.Call call = iserverContractConidAlgosGetCall(conid, algos, addDescription, addParams,
                progressListener, progressRequestListener);
        return call;

    }

    /**
     * Build call for iserverContractConidAlgosGet.
     *
     * @param conid                   IBKR contract identifier (required)
     * @param algos                   List of algo ids delimited by \&quot;;\&quot; to filter by. Max of 8 algos ids can
     *                                be specified. (optional)
     * @param addDescription          Whether or not to add algo descriptions to response. Set to 1 for yes, 0 for no.
     *                                (optional)
     * @param addParams               Whether or not to show algo parameters.  Set to 1 for yes, 0 for no. (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call iserverContractConidAlgosGetCall(String conid, String algos, String addDescription,
            String addParams, final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        final Object localVarPostBody = null;

        // create path and map variables
        final String localVarPath = "/iserver/contract/{conid}/algos".replaceAll("\\{" + "conid" + "\\}",
                apiClient.escapeString(conid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        final List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (algos != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("algos", algos));
        }
        if (addDescription != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("addDescription", addDescription));
        }
        if (addParams != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("addParams", addParams));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        final Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient()
                    .networkInterceptors()
                    .add(new com.squareup.okhttp.Interceptor() {
                        @Override
                        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
                                throws IOException {
                            com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                            return originalResponse.newBuilder()
                                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                                    .build();
                        }
                    });
        }

        String[] localVarAuthNames = new String[]{};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
                localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * IB Algo Params (asynchronously)
     * Returns supported IB Algos for contract. Must be called a second time to query the list of available parameters.
     *
     * @param conid          IBKR contract identifier (required)
     * @param algos          List of algo ids delimited by \&quot;;\&quot; to filter by. Max of 8 algos ids can be
     *                       specified. (optional)
     * @param addDescription Whether or not to add algo descriptions to response. Set to 1 for yes, 0 for no. (optional)
     * @param addParams      Whether or not to show algo parameters.  Set to 1 for yes, 0 for no. (optional)
     * @param callback       The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call iserverContractConidAlgosGetAsync(String conid, String algos, String addDescription,
            String addParams, final ApiCallback<List<Object>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = iserverContractConidAlgosGetValidateBeforeCall(conid, algos, addDescription,
                addParams, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Object>>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Info and Rules
     * Returns both contract info and rules from a single endpoint. For only contract rules, use the endpoint
     * /iserver/contract/rules. For only contract info, use the endpoint /iserver/contract/{conid}/info.
     *
     * @param conid IBKR contract identifier (required)
     * @param isBuy Side of the market rules apply too. Set to **true** for Buy Orders, set to **false** for Sell Orders
     *              (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object iserverContractConidInfoAndRulesGet(String conid, Boolean isBuy) throws ApiException {
        ApiResponse<Object> resp = iserverContractConidInfoAndRulesGetWithHttpInfo(conid, isBuy);
        return resp.getData();
    }

    /**
     * Info and Rules
     * Returns both contract info and rules from a single endpoint. For only contract rules, use the endpoint
     * /iserver/contract/rules. For only contract info, use the endpoint /iserver/contract/{conid}/info.
     *
     * @param conid IBKR contract identifier (required)
     * @param isBuy Side of the market rules apply too. Set to **true** for Buy Orders, set to **false** for Sell Orders
     *              (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> iserverContractConidInfoAndRulesGetWithHttpInfo(String conid, Boolean isBuy)
            throws ApiException {
        com.squareup.okhttp.Call call = iserverContractConidInfoAndRulesGetValidateBeforeCall(conid, isBuy, null, null);
        Type localVarReturnType = new TypeToken<Object>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call iserverContractConidInfoAndRulesGetValidateBeforeCall(String conid, Boolean isBuy,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'conid' is set
        if (conid == null) {
            throw new ApiException(
                    "Missing the required parameter 'conid' when calling iserverContractConidInfoAndRulesGet(Async)");
        }

        // verify the required parameter 'isBuy' is set
        if (isBuy == null) {
            throw new ApiException(
                    "Missing the required parameter 'isBuy' when calling iserverContractConidInfoAndRulesGet(Async)");
        }


        com.squareup.okhttp.Call call = iserverContractConidInfoAndRulesGetCall(conid, isBuy, progressListener,
                progressRequestListener);
        return call;

    }

    /**
     * Build call for iserverContractConidInfoAndRulesGet.
     *
     * @param conid                   IBKR contract identifier (required)
     * @param isBuy                   Side of the market rules apply too. Set to **true** for Buy Orders, set to
     *                                **false** for Sell Orders (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call iserverContractConidInfoAndRulesGetCall(String conid, Boolean isBuy,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        final Object localVarPostBody = null;

        // create path and map variables
        final String localVarPath = "/iserver/contract/{conid}/info-and-rules".replaceAll("\\{" + "conid" + "\\}",
                apiClient.escapeString(conid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        final List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (isBuy != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("isBuy", isBuy));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        final Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient()
                    .networkInterceptors()
                    .add(new com.squareup.okhttp.Interceptor() {
                        @Override
                        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
                                throws IOException {
                            com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                            return originalResponse.newBuilder()
                                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                                    .build();
                        }
                    });
        }

        String[] localVarAuthNames = new String[]{};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
                localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Info and Rules (asynchronously)
     * Returns both contract info and rules from a single endpoint. For only contract rules, use the endpoint
     * /iserver/contract/rules. For only contract info, use the endpoint /iserver/contract/{conid}/info.
     *
     * @param conid    IBKR contract identifier (required)
     * @param isBuy    Side of the market rules apply too. Set to **true** for Buy Orders, set to **false** for Sell
     *                 Orders (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call iserverContractConidInfoAndRulesGetAsync(String conid, Boolean isBuy,
            final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = iserverContractConidInfoAndRulesGetValidateBeforeCall(conid, isBuy,
                progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Contract Details
     * Using the Contract Identifier get contract info. You can use this to prefill your order before you submit an
     * order
     *
     * @param conid contract id (required)
     * @return Contract
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Contract iserverContractConidInfoGet(String conid) throws ApiException {
        ApiResponse<Contract> resp = iserverContractConidInfoGetWithHttpInfo(conid);
        return resp.getData();
    }

    /**
     * Contract Details
     * Using the Contract Identifier get contract info. You can use this to prefill your order before you submit an
     * order
     *
     * @param conid contract id (required)
     * @return ApiResponse&lt;Contract&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Contract> iserverContractConidInfoGetWithHttpInfo(String conid) throws ApiException {
        com.squareup.okhttp.Call call = iserverContractConidInfoGetValidateBeforeCall(conid, null, null);
        Type localVarReturnType = new TypeToken<Contract>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call iserverContractConidInfoGetValidateBeforeCall(String conid,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'conid' is set
        if (conid == null) {
            throw new ApiException(
                    "Missing the required parameter 'conid' when calling iserverContractConidInfoGet(Async)");
        }


        com.squareup.okhttp.Call call = iserverContractConidInfoGetCall(conid, progressListener,
                progressRequestListener);
        return call;

    }

    /**
     * Build call for iserverContractConidInfoGet.
     *
     * @param conid                   contract id (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call iserverContractConidInfoGetCall(String conid,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        final Object localVarPostBody = null;

        // create path and map variables
        final String localVarPath = "/iserver/contract/{conid}/info".replaceAll("\\{" + "conid" + "\\}",
                apiClient.escapeString(conid.toString()));

        final List<Pair> localVarQueryParams = new ArrayList<Pair>();
        final List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        final Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient()
                    .networkInterceptors()
                    .add(new com.squareup.okhttp.Interceptor() {
                        @Override
                        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
                                throws IOException {
                            com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                            return originalResponse.newBuilder()
                                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                                    .build();
                        }
                    });
        }

        String[] localVarAuthNames = new String[]{};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
                localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Contract Details (asynchronously)
     * Using the Contract Identifier get contract info. You can use this to prefill your order before you submit an
     * order
     *
     * @param conid    contract id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call iserverContractConidInfoGetAsync(String conid, final ApiCallback<Contract> callback)
            throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = iserverContractConidInfoGetValidateBeforeCall(conid, progressListener,
                progressRequestListener);
        Type localVarReturnType = new TypeToken<Contract>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Contract Rules
     * Returns trading related rules for a specific contract and side. For both contract info and rules use the endpoint
     * /iserver/contract/{conid}/info-and-rules.
     *
     * @param conid (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object iserverContractRulesPost(Conid conid) throws ApiException {
        ApiResponse<Object> resp = iserverContractRulesPostWithHttpInfo(conid);
        return resp.getData();
    }

    /**
     * Contract Rules
     * Returns trading related rules for a specific contract and side. For both contract info and rules use the endpoint
     * /iserver/contract/{conid}/info-and-rules.
     *
     * @param conid (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> iserverContractRulesPostWithHttpInfo(Conid conid) throws ApiException {
        com.squareup.okhttp.Call call = iserverContractRulesPostValidateBeforeCall(conid, null, null);
        Type localVarReturnType = new TypeToken<Object>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call iserverContractRulesPostValidateBeforeCall(Conid conid,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'conid' is set
        if (conid == null) {
            throw new ApiException(
                    "Missing the required parameter 'conid' when calling iserverContractRulesPost(Async)");
        }


        com.squareup.okhttp.Call call = iserverContractRulesPostCall(conid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Build call for iserverContractRulesPost.
     *
     * @param conid                   (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call iserverContractRulesPostCall(Conid conid,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        final Object localVarPostBody = conid;

        // create path and map variables
        final String localVarPath = "/iserver/contract/rules";

        final List<Pair> localVarQueryParams = new ArrayList<Pair>();
        final List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        final Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient()
                    .networkInterceptors()
                    .add(new com.squareup.okhttp.Interceptor() {
                        @Override
                        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
                                throws IOException {
                            com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                            return originalResponse.newBuilder()
                                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                                    .build();
                        }
                    });
        }

        String[] localVarAuthNames = new String[]{};
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams,
                localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Contract Rules (asynchronously)
     * Returns trading related rules for a specific contract and side. For both contract info and rules use the endpoint
     * /iserver/contract/{conid}/info-and-rules.
     *
     * @param conid    (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call iserverContractRulesPostAsync(Conid conid, final ApiCallback<Object> callback)
            throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = iserverContractRulesPostValidateBeforeCall(conid, progressListener,
                progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Secdef Info
     * Provides Contract Details of Futures, Options, Warrants, Cash and CFDs based on conid. To get the strike price
     * for Options/Warrants use \&quot;/iserver/secdef/strikes\&quot; endpoint. Must call /secdef/search for the
     * underlying contract first.
     *
     * @param conid    underlying contract id (required)
     * @param sectype  FUT/OPT/WAR/CASH/CFD (required)
     * @param month    contract month, only required for FUT/OPT/WAR in the format MMMYY, example JAN00 (optional)
     * @param exchange optional, default is SMART (optional)
     * @param strike   optional, only required for OPT/WAR (optional)
     * @param right    C for call, P for put (optional)
     * @return List&lt;SecdefInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SecdefInfo> iserverSecdefInfoGet(String conid, String sectype, String month, String exchange,
            String strike, String right) throws ApiException {
        ApiResponse<List<SecdefInfo>> resp = iserverSecdefInfoGetWithHttpInfo(conid, sectype, month, exchange, strike,
                right);
        return resp.getData();
    }

    /**
     * Secdef Info
     * Provides Contract Details of Futures, Options, Warrants, Cash and CFDs based on conid. To get the strike price
     * for Options/Warrants use \&quot;/iserver/secdef/strikes\&quot; endpoint. Must call /secdef/search for the
     * underlying contract first.
     *
     * @param conid    underlying contract id (required)
     * @param sectype  FUT/OPT/WAR/CASH/CFD (required)
     * @param month    contract month, only required for FUT/OPT/WAR in the format MMMYY, example JAN00 (optional)
     * @param exchange optional, default is SMART (optional)
     * @param strike   optional, only required for OPT/WAR (optional)
     * @param right    C for call, P for put (optional)
     * @return ApiResponse&lt;List&lt;SecdefInfo&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SecdefInfo>> iserverSecdefInfoGetWithHttpInfo(String conid, String sectype, String month,
            String exchange, String strike, String right) throws ApiException {
        com.squareup.okhttp.Call call = iserverSecdefInfoGetValidateBeforeCall(conid, sectype, month, exchange, strike,
                right, null, null);
        Type localVarReturnType = new TypeToken<List<SecdefInfo>>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    @SuppressWarnings({"rawtypes", "checkstyle:ParameterNumber"})
    private com.squareup.okhttp.Call iserverSecdefInfoGetValidateBeforeCall(String conid, String sectype, String month,
            String exchange, String strike, String right, final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'conid' is set
        if (conid == null) {
            throw new ApiException("Missing the required parameter 'conid' when calling iserverSecdefInfoGet(Async)");
        }

        // verify the required parameter 'sectype' is set
        if (sectype == null) {
            throw new ApiException("Missing the required parameter 'sectype' when calling iserverSecdefInfoGet(Async)");
        }


        com.squareup.okhttp.Call call = iserverSecdefInfoGetCall(conid, sectype, month, exchange, strike, right,
                progressListener, progressRequestListener);
        return call;

    }

    /**
     * Build call for iserverSecdefInfoGet.
     *
     * @param conid                   underlying contract id (required)
     * @param sectype                 FUT/OPT/WAR/CASH/CFD (required)
     * @param month                   contract month, only required for FUT/OPT/WAR in the format MMMYY, example JAN00
     *                                (optional)
     * @param exchange                optional, default is SMART (optional)
     * @param strike                  optional, only required for OPT/WAR (optional)
     * @param right                   C for call, P for put (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    @SuppressWarnings("checkstyle:ParameterNumber")
    public com.squareup.okhttp.Call iserverSecdefInfoGetCall(String conid, String sectype, String month,
            String exchange, String strike, String right, final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        final Object localVarPostBody = null;

        // create path and map variables
        final String localVarPath = "/iserver/secdef/info";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        final List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (conid != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("conid", conid));
        }
        if (sectype != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("sectype", sectype));
        }
        if (month != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("month", month));
        }
        if (exchange != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("exchange", exchange));
        }
        if (strike != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("strike", strike));
        }
        if (right != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("right", right));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        final Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient()
                    .networkInterceptors()
                    .add(new com.squareup.okhttp.Interceptor() {
                        @Override
                        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
                                throws IOException {
                            com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                            return originalResponse.newBuilder()
                                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                                    .build();
                        }
                    });
        }

        String[] localVarAuthNames = new String[]{};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
                localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Secdef Info (asynchronously)
     * Provides Contract Details of Futures, Options, Warrants, Cash and CFDs based on conid. To get the strike price
     * for Options/Warrants use \&quot;/iserver/secdef/strikes\&quot; endpoint. Must call /secdef/search for the
     * underlying contract first.
     *
     * @param conid    underlying contract id (required)
     * @param sectype  FUT/OPT/WAR/CASH/CFD (required)
     * @param month    contract month, only required for FUT/OPT/WAR in the format MMMYY, example JAN00 (optional)
     * @param exchange optional, default is SMART (optional)
     * @param strike   optional, only required for OPT/WAR (optional)
     * @param right    C for call, P for put (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call iserverSecdefInfoGetAsync(String conid, String sectype, String month,
            String exchange, String strike, String right, final ApiCallback<List<SecdefInfo>> callback)
            throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = iserverSecdefInfoGetValidateBeforeCall(conid, sectype, month, exchange, strike,
                right, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SecdefInfo>>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Search by Symbol or Name
     * Search by underlying symbol or company name. Relays back what derivative contract(s) it has. This endpoint must
     * be called before using /secdef/info. If company name is specified will only receive limited response: conid,
     * companyName, companyHeader and symbol.
     *
     * @param symbol Symbol or Company Name to be searched (required)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Object> iserverSecdefSearchPost(Symbol symbol) throws ApiException {
        ApiResponse<List<Object>> resp = iserverSecdefSearchPostWithHttpInfo(symbol);
        return resp.getData();
    }

    /**
     * Search by Symbol or Name
     * Search by underlying symbol or company name. Relays back what derivative contract(s) it has. This endpoint must
     * be called before using /secdef/info. If company name is specified will only receive limited response: conid,
     * companyName, companyHeader and symbol.
     *
     * @param symbol Symbol or Company Name to be searched (required)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Object>> iserverSecdefSearchPostWithHttpInfo(Symbol symbol) throws ApiException {
        com.squareup.okhttp.Call call = iserverSecdefSearchPostValidateBeforeCall(symbol, null, null);
        Type localVarReturnType = new TypeToken<List<Object>>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call iserverSecdefSearchPostValidateBeforeCall(Symbol symbol,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'symbol' is set
        if (symbol == null) {
            throw new ApiException(
                    "Missing the required parameter 'symbol' when calling iserverSecdefSearchPost(Async)");
        }


        com.squareup.okhttp.Call call = iserverSecdefSearchPostCall(symbol, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Build call for iserverSecdefSearchPost.
     *
     * @param symbol                  Symbol or Company Name to be searched (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call iserverSecdefSearchPostCall(Symbol symbol,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        final Object localVarPostBody = symbol;

        // create path and map variables
        final String localVarPath = "/iserver/secdef/search";

        final List<Pair> localVarQueryParams = new ArrayList<Pair>();
        final List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        final Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient()
                    .networkInterceptors()
                    .add(new com.squareup.okhttp.Interceptor() {
                        @Override
                        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
                                throws IOException {
                            com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                            return originalResponse.newBuilder()
                                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                                    .build();
                        }
                    });
        }

        String[] localVarAuthNames = new String[]{};
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams,
                localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Search by Symbol or Name (asynchronously)
     * Search by underlying symbol or company name. Relays back what derivative contract(s) it has. This endpoint must
     * be called before using /secdef/info. If company name is specified will only receive limited response: conid,
     * companyName, companyHeader and symbol.
     *
     * @param symbol   Symbol or Company Name to be searched (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call iserverSecdefSearchPostAsync(Symbol symbol,
            final ApiCallback<List<Object>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = iserverSecdefSearchPostValidateBeforeCall(symbol, progressListener,
                progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Object>>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Search Strikes
     * Query strikes for Options/Warrants. For the conid of the underlying contract, available contract months and
     * exchanges use \&quot;/iserver/secdef/search\&quot;
     *
     * @param conid    contract id of the underlying contract (required)
     * @param sectype  OPT/WAR (required)
     * @param month    contract month (required)
     * @param exchange optional, default is SMART (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object iserverSecdefStrikesGet(String conid, String sectype, String month, String exchange)
            throws ApiException {
        ApiResponse<Object> resp = iserverSecdefStrikesGetWithHttpInfo(conid, sectype, month, exchange);
        return resp.getData();
    }

    /**
     * Search Strikes
     * Query strikes for Options/Warrants. For the conid of the underlying contract, available contract months and
     * exchanges use \&quot;/iserver/secdef/search\&quot;
     *
     * @param conid    contract id of the underlying contract (required)
     * @param sectype  OPT/WAR (required)
     * @param month    contract month (required)
     * @param exchange optional, default is SMART (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> iserverSecdefStrikesGetWithHttpInfo(String conid, String sectype, String month,
            String exchange) throws ApiException {
        com.squareup.okhttp.Call call = iserverSecdefStrikesGetValidateBeforeCall(conid, sectype, month, exchange, null,
                null);
        Type localVarReturnType = new TypeToken<Object>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call iserverSecdefStrikesGetValidateBeforeCall(String conid, String sectype,
            String month, String exchange, final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'conid' is set
        if (conid == null) {
            throw new ApiException(
                    "Missing the required parameter 'conid' when calling iserverSecdefStrikesGet(Async)");
        }

        // verify the required parameter 'sectype' is set
        if (sectype == null) {
            throw new ApiException(
                    "Missing the required parameter 'sectype' when calling iserverSecdefStrikesGet(Async)");
        }

        // verify the required parameter 'month' is set
        if (month == null) {
            throw new ApiException(
                    "Missing the required parameter 'month' when calling iserverSecdefStrikesGet(Async)");
        }


        com.squareup.okhttp.Call call = iserverSecdefStrikesGetCall(conid, sectype, month, exchange, progressListener,
                progressRequestListener);
        return call;

    }

    /**
     * Build call for iserverSecdefStrikesGet.
     *
     * @param conid                   contract id of the underlying contract (required)
     * @param sectype                 OPT/WAR (required)
     * @param month                   contract month (required)
     * @param exchange                optional, default is SMART (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call iserverSecdefStrikesGetCall(String conid, String sectype, String month,
            String exchange, final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        final Object localVarPostBody = null;

        // create path and map variables
        final String localVarPath = "/iserver/secdef/strikes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        final List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (conid != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("conid", conid));
        }
        if (sectype != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("sectype", sectype));
        }
        if (month != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("month", month));
        }
        if (exchange != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("exchange", exchange));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        final Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient()
                    .networkInterceptors()
                    .add(new com.squareup.okhttp.Interceptor() {
                        @Override
                        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
                                throws IOException {
                            com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                            return originalResponse.newBuilder()
                                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                                    .build();
                        }
                    });
        }

        String[] localVarAuthNames = new String[]{};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
                localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Search Strikes (asynchronously)
     * Query strikes for Options/Warrants. For the conid of the underlying contract, available contract months and
     * exchanges use \&quot;/iserver/secdef/search\&quot;
     *
     * @param conid    contract id of the underlying contract (required)
     * @param sectype  OPT/WAR (required)
     * @param month    contract month (required)
     * @param exchange optional, default is SMART (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call iserverSecdefStrikesGetAsync(String conid, String sectype, String month,
            String exchange, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = iserverSecdefStrikesGetValidateBeforeCall(conid, sectype, month, exchange,
                progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Security Futures by Symbol.
     * Returns a list of non-expired future contracts for given symbol(s)
     *
     * @param symbols list of case-sensitive symbols separated by comma (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object trsrvFuturesGet(String symbols) throws ApiException {
        ApiResponse<Object> resp = trsrvFuturesGetWithHttpInfo(symbols);
        return resp.getData();
    }

    /**
     * Security Futures by Symbol.
     * Returns a list of non-expired future contracts for given symbol(s)
     *
     * @param symbols list of case-sensitive symbols separated by comma (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> trsrvFuturesGetWithHttpInfo(String symbols) throws ApiException {
        com.squareup.okhttp.Call call = trsrvFuturesGetValidateBeforeCall(symbols, null, null);
        Type localVarReturnType = new TypeToken<Object>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call trsrvFuturesGetValidateBeforeCall(String symbols,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'symbols' is set
        if (symbols == null) {
            throw new ApiException("Missing the required parameter 'symbols' when calling trsrvFuturesGet(Async)");
        }


        com.squareup.okhttp.Call call = trsrvFuturesGetCall(symbols, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Build call for trsrvFuturesGet.
     *
     * @param symbols                 list of case-sensitive symbols separated by comma (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call trsrvFuturesGetCall(String symbols,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        final Object localVarPostBody = null;

        // create path and map variables
        final String localVarPath = "/trsrv/futures";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        final List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (symbols != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("symbols", symbols));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        final Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient()
                    .networkInterceptors()
                    .add(new com.squareup.okhttp.Interceptor() {
                        @Override
                        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
                                throws IOException {
                            com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                            return originalResponse.newBuilder()
                                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                                    .build();
                        }
                    });
        }

        String[] localVarAuthNames = new String[]{};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
                localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Security Futures by Symbol (asynchronously).
     * Returns a list of non-expired future contracts for given symbol(s)
     *
     * @param symbols  list of case-sensitive symbols separated by comma (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call trsrvFuturesGetAsync(String symbols, final ApiCallback<Object> callback)
            throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = trsrvFuturesGetValidateBeforeCall(symbols, progressListener,
                progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Secdef by Conid.
     * Returns a list of security definitions for the given conids
     *
     * @param body request body (required)
     * @return Secdef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Secdef trsrvSecdefPost(ConIdRequest body) throws ApiException {
        ApiResponse<Secdef> resp = trsrvSecdefPostWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Secdef by Conid.
     * Returns a list of security definitions for the given conids
     *
     * @param body request body (required)
     * @return ApiResponse&lt;Secdef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Secdef> trsrvSecdefPostWithHttpInfo(ConIdRequest body) throws ApiException {
        com.squareup.okhttp.Call call = trsrvSecdefPostValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<Secdef>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call trsrvSecdefPostValidateBeforeCall(ConIdRequest body,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling trsrvSecdefPost(Async)");
        }


        com.squareup.okhttp.Call call = trsrvSecdefPostCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Build call for trsrvSecdefPost.
     *
     * @param body                    request body (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call trsrvSecdefPostCall(ConIdRequest body,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        final ConIdRequest localVarPostBody = body;

        // create path and map variables
        final String localVarPath = "/trsrv/secdef";

        final List<Pair> localVarQueryParams = new ArrayList<Pair>();
        final List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        final Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient()
                    .networkInterceptors()
                    .add(new com.squareup.okhttp.Interceptor() {
                        @Override
                        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
                                throws IOException {
                            com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                            return originalResponse.newBuilder()
                                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                                    .build();
                        }
                    });
        }

        String[] localVarAuthNames = new String[]{};
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams,
                localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Secdef by Conid (asynchronously).
     * Returns a list of security definitions for the given conids
     *
     * @param body     request body (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call trsrvSecdefPostAsync(ConIdRequest body, final ApiCallback<Secdef> callback)
            throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = trsrvSecdefPostValidateBeforeCall(body, progressListener,
                progressRequestListener);
        Type localVarReturnType = new TypeToken<Secdef>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Get trading schedule for symbol.
     * Returns the trading schedule up to a month for the requested contract
     *
     * @param assetClass     specify the asset class of the contract. Available values-- Stock: STK, Option: OPT,
     *                       Future: FUT, Contract For Difference: CFD, Warrant: WAR, Forex: SWP, Mutual Fund: FND,
     *                       Bond: BND, Inter-Commodity Spreads: ICS  (required)
     * @param symbol         Underlying Symbol for specified contract, for example &#39;AAPL&#39; for US Stock - Apple
     *                       Inc. (required)
     * @param exchange       Native exchange for contract, for example &#39;NASDAQ&#39; for US Stock - Apple Inc.
     *                       (optional)
     * @param exchangeFilter Response only returns trading schedule for specified exchange (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object trsrvSecdefScheduleGet(String assetClass, String symbol, String exchange, String exchangeFilter)
            throws ApiException {
        ApiResponse<Object> resp = trsrvSecdefScheduleGetWithHttpInfo(assetClass, symbol, exchange, exchangeFilter);
        return resp.getData();
    }

    /**
     * Get trading schedule for symbol.
     * Returns the trading schedule up to a month for the requested contract
     *
     * @param assetClass     specify the asset class of the contract. Available values-- Stock: STK, Option: OPT,
     *                       Future: FUT, Contract For Difference: CFD, Warrant: WAR, Forex: SWP, Mutual Fund: FND,
     *                       Bond: BND, Inter-Commodity Spreads: ICS  (required)
     * @param symbol         Underlying Symbol for specified contract, for example &#39;AAPL&#39; for US Stock - Apple
     *                       Inc. (required)
     * @param exchange       Native exchange for contract, for example &#39;NASDAQ&#39; for US Stock - Apple Inc.
     *                       (optional)
     * @param exchangeFilter Response only returns trading schedule for specified exchange (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> trsrvSecdefScheduleGetWithHttpInfo(String assetClass, String symbol, String exchange,
            String exchangeFilter) throws ApiException {
        com.squareup.okhttp.Call call = trsrvSecdefScheduleGetValidateBeforeCall(assetClass, symbol, exchange,
                exchangeFilter, null, null);
        Type localVarReturnType = new TypeToken<Object>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call trsrvSecdefScheduleGetValidateBeforeCall(String assetClass, String symbol,
            String exchange, String exchangeFilter, final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'assetClass' is set
        if (assetClass == null) {
            throw new ApiException(
                    "Missing the required parameter 'assetClass' when calling trsrvSecdefScheduleGet(Async)");
        }

        // verify the required parameter 'symbol' is set
        if (symbol == null) {
            throw new ApiException(
                    "Missing the required parameter 'symbol' when calling trsrvSecdefScheduleGet(Async)");
        }


        com.squareup.okhttp.Call call = trsrvSecdefScheduleGetCall(assetClass, symbol, exchange, exchangeFilter,
                progressListener, progressRequestListener);
        return call;

    }

    /**
     * Build call for trsrvSecdefScheduleGet.
     *
     * @param assetClass              specify the asset class of the contract. Available values-- Stock: STK, Option:
     *                                OPT, Future: FUT, Contract For Difference: CFD, Warrant: WAR, Forex: SWP, Mutual
     *                                Fund: FND, Bond: BND, Inter-Commodity Spreads: ICS  (required)
     * @param symbol                  Underlying Symbol for specified contract, for example &#39;AAPL&#39; for US Stock
     *                                - Apple Inc. (required)
     * @param exchange                Native exchange for contract, for example &#39;NASDAQ&#39; for US Stock - Apple
     *                                Inc. (optional)
     * @param exchangeFilter          Response only returns trading schedule for specified exchange (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call trsrvSecdefScheduleGetCall(String assetClass, String symbol, String exchange,
            String exchangeFilter, final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        final Object localVarPostBody = null;

        // create path and map variables
        final String localVarPath = "/trsrv/secdef/schedule";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        final List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (assetClass != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("assetClass", assetClass));
        }
        if (symbol != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("symbol", symbol));
        }
        if (exchange != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("exchange", exchange));
        }
        if (exchangeFilter != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("exchangeFilter", exchangeFilter));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        final Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient()
                    .networkInterceptors()
                    .add(new com.squareup.okhttp.Interceptor() {
                        @Override
                        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
                                throws IOException {
                            com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                            return originalResponse.newBuilder()
                                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                                    .build();
                        }
                    });
        }

        String[] localVarAuthNames = new String[]{};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
                localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get trading schedule for symbol (asynchronously).
     * Returns the trading schedule up to a month for the requested contract
     *
     * @param assetClass     specify the asset class of the contract. Available values-- Stock: STK, Option: OPT,
     *                       Future: FUT, Contract For Difference: CFD, Warrant: WAR, Forex: SWP, Mutual Fund: FND,
     *                       Bond: BND, Inter-Commodity Spreads: ICS  (required)
     * @param symbol         Underlying Symbol for specified contract, for example &#39;AAPL&#39; for US Stock - Apple
     *                       Inc. (required)
     * @param exchange       Native exchange for contract, for example &#39;NASDAQ&#39; for US Stock - Apple Inc.
     *                       (optional)
     * @param exchangeFilter Response only returns trading schedule for specified exchange (optional)
     * @param callback       The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call trsrvSecdefScheduleGetAsync(String assetClass, String symbol, String exchange,
            String exchangeFilter, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = trsrvSecdefScheduleGetValidateBeforeCall(assetClass, symbol, exchange,
                exchangeFilter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Security Stocks by Symbol.
     * Returns an object contains all stock contracts for given symbol(s)
     *
     * @param symbols list of upper-sensitive symbols separated by comma (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object trsrvStocksGet(String symbols) throws ApiException {
        ApiResponse<Object> resp = trsrvStocksGetWithHttpInfo(symbols);
        return resp.getData();
    }

    /**
     * Security Stocks by Symbol.
     * Returns an object contains all stock contracts for given symbol(s)
     *
     * @param symbols list of upper-sensitive symbols separated by comma (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> trsrvStocksGetWithHttpInfo(String symbols) throws ApiException {
        com.squareup.okhttp.Call call = trsrvStocksGetValidateBeforeCall(symbols, null, null);
        Type localVarReturnType = new TypeToken<Object>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call trsrvStocksGetValidateBeforeCall(String symbols,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'symbols' is set
        if (symbols == null) {
            throw new ApiException("Missing the required parameter 'symbols' when calling trsrvStocksGet(Async)");
        }


        com.squareup.okhttp.Call call = trsrvStocksGetCall(symbols, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Build call for trsrvStocksGet.
     *
     * @param symbols                 list of upper-sensitive symbols separated by comma (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call trsrvStocksGetCall(String symbols,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        final Object localVarPostBody = null;

        // create path and map variables
        final String localVarPath = "/trsrv/stocks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        final List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (symbols != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("symbols", symbols));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        final Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient()
                    .networkInterceptors()
                    .add(new com.squareup.okhttp.Interceptor() {
                        @Override
                        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
                                throws IOException {
                            com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                            return originalResponse.newBuilder()
                                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                                    .build();
                        }
                    });
        }

        String[] localVarAuthNames = new String[]{};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
                localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Security Stocks by Symbol (asynchronously).
     * Returns an object contains all stock contracts for given symbol(s)
     *
     * @param symbols  list of upper-sensitive symbols separated by comma (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call trsrvStocksGetAsync(String symbols, final ApiCallback<Object> callback)
            throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = trsrvStocksGetValidateBeforeCall(symbols, progressListener,
                progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

}
