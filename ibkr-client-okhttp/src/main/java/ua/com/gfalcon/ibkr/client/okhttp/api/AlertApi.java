/*
 * MIT License
 *
 * Copyright (c) 2015-2022 Oleksii Khalikov
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/*
 * Client Portal Web API
 * Client Poral Web API
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package ua.com.gfalcon.ibkr.client.okhttp.api;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.reflect.TypeToken;

import ua.com.gfalcon.ibkr.client.okhttp.ApiCallback;
import ua.com.gfalcon.ibkr.client.okhttp.ApiClient;
import ua.com.gfalcon.ibkr.client.okhttp.ApiException;
import ua.com.gfalcon.ibkr.client.okhttp.ApiResponse;
import ua.com.gfalcon.ibkr.client.okhttp.Configuration;
import ua.com.gfalcon.ibkr.client.okhttp.Pair;
import ua.com.gfalcon.ibkr.client.okhttp.ProgressRequestBody;
import ua.com.gfalcon.ibkr.client.okhttp.ProgressResponseBody;
import ua.com.gfalcon.ibkr.model.AlertActivation;
import ua.com.gfalcon.ibkr.model.AlertRequest;
import ua.com.gfalcon.ibkr.model.AlertResponse;
import ua.com.gfalcon.ibkr.model.Body;

/**
 * Alert Api.
 */
public class AlertApi {

    private ApiClient apiClient;

    public AlertApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AlertApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Activate or deactivate an alert.
     * Please note, if alertId is 0, it will activate/deactivate all alerts
     *
     * @param accountId account id (required)
     * @param body      order request info (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object iserverAccountAccountIdAlertActivatePost(String accountId, AlertActivation body) throws ApiException {
        ApiResponse<Object> resp = iserverAccountAccountIdAlertActivatePostWithHttpInfo(accountId, body);
        return resp.getData();
    }

    /**
     * Activate or deactivate an alert.
     * Please note, if alertId is 0, it will activate/deactivate all alerts
     *
     * @param accountId account id (required)
     * @param body      order request info (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> iserverAccountAccountIdAlertActivatePostWithHttpInfo(String accountId, AlertActivation body)
            throws ApiException {
        com.squareup.okhttp.Call call = iserverAccountAccountIdAlertActivatePostValidateBeforeCall(accountId, body,
                null, null);
        Type localVarReturnType = new TypeToken<Object>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call iserverAccountAccountIdAlertActivatePostValidateBeforeCall(String accountId,
            AlertActivation body, final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException(
                    "Missing the required parameter 'accountId' when calling"
                            + " iserverAccountAccountIdAlertActivatePost(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException(
                    "Missing the required parameter 'body' when calling "
                            + "iserverAccountAccountIdAlertActivatePost(Async)");
        }


        com.squareup.okhttp.Call call = iserverAccountAccountIdAlertActivatePostCall(accountId, body, progressListener,
                progressRequestListener);
        return call;

    }

    /**
     * Build call for iserverAccountAccountIdAlertActivatePost.
     *
     * @param accountId               account id (required)
     * @param body                    order request info (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call iserverAccountAccountIdAlertActivatePostCall(String accountId, AlertActivation body,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        final Object localVarPostBody = body;

        // create path and map variables
        final String localVarPath = "/iserver/account/{accountId}/alert/activate"
                .replaceAll("\\{" + "accountId" + "\\}",
                apiClient.escapeString(accountId.toString()));

        final List<Pair> localVarQueryParams = new ArrayList<Pair>();
        final List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        final Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient()
                    .networkInterceptors()
                    .add(new com.squareup.okhttp.Interceptor() {
                        @Override
                        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
                                throws IOException {
                            com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                            return originalResponse.newBuilder()
                                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                                    .build();
                        }
                    });
        }

        String[] localVarAuthNames = new String[]{};
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams,
                localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Activate or deactivate an alert (asynchronously).
     * Please note, if alertId is 0, it will activate/deactivate all alerts
     *
     * @param accountId account id (required)
     * @param body      order request info (required)
     * @param callback  The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call iserverAccountAccountIdAlertActivatePostAsync(String accountId, AlertActivation body,
            final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = iserverAccountAccountIdAlertActivatePostValidateBeforeCall(accountId, body,
                progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Delete an alert.
     * Please be careful, if alertId is 0, it will delete all alerts
     *
     * @param accountId account id (required)
     * @param alertId   alert id (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object iserverAccountAccountIdAlertAlertIdDelete(String accountId, String alertId) throws ApiException {
        ApiResponse<Object> resp = iserverAccountAccountIdAlertAlertIdDeleteWithHttpInfo(accountId, alertId);
        return resp.getData();
    }

    /**
     * Delete an alert.
     * Please be careful, if alertId is 0, it will delete all alerts
     *
     * @param accountId account id (required)
     * @param alertId   alert id (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> iserverAccountAccountIdAlertAlertIdDeleteWithHttpInfo(String accountId, String alertId)
            throws ApiException {
        com.squareup.okhttp.Call call = iserverAccountAccountIdAlertAlertIdDeleteValidateBeforeCall(accountId, alertId,
                null, null);
        Type localVarReturnType = new TypeToken<Object>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call iserverAccountAccountIdAlertAlertIdDeleteValidateBeforeCall(String accountId,
            String alertId, final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException(
                    "Missing the required parameter 'accountId' when calling "
                            + "iserverAccountAccountIdAlertAlertIdDelete(Async)");
        }

        // verify the required parameter 'alertId' is set
        if (alertId == null) {
            throw new ApiException(
                    "Missing the required parameter 'alertId' when calling "
                            + "iserverAccountAccountIdAlertAlertIdDelete(Async)");
        }


        com.squareup.okhttp.Call call = iserverAccountAccountIdAlertAlertIdDeleteCall(accountId, alertId,
                progressListener, progressRequestListener);
        return call;

    }

    /**
     * Build call for iserverAccountAccountIdAlertAlertIdDelete.
     *
     * @param accountId               account id (required)
     * @param alertId                 alert id (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call iserverAccountAccountIdAlertAlertIdDeleteCall(String accountId, String alertId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        final Object localVarPostBody = null;

        // create path and map variables
        final String localVarPath = "/iserver/account/{accountId}/alert/{alertId}"
                .replaceAll("\\{" + "accountId" + "\\}",
                        apiClient.escapeString(accountId.toString()))
                .replaceAll("\\{" + "alertId" + "\\}", apiClient.escapeString(alertId.toString()));

        final List<Pair> localVarQueryParams = new ArrayList<Pair>();
        final List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        final Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient()
                    .networkInterceptors()
                    .add(new com.squareup.okhttp.Interceptor() {
                        @Override
                        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
                                throws IOException {
                            com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                            return originalResponse.newBuilder()
                                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                                    .build();
                        }
                    });
        }

        String[] localVarAuthNames = new String[]{};
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams,
                localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Delete an alert (asynchronously).
     * Please be careful, if alertId is 0, it will delete all alerts
     *
     * @param accountId account id (required)
     * @param alertId   alert id (required)
     * @param callback  The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call iserverAccountAccountIdAlertAlertIdDeleteAsync(String accountId, String alertId,
            final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = iserverAccountAccountIdAlertAlertIdDeleteValidateBeforeCall(accountId, alertId,
                progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Create or modify alert.
     * Please note here, DO NOT pass orderId when creating a new alert, toolId is only required for MTA alert
     *
     * @param accountId account id (required)
     * @param body      alert info (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object iserverAccountAccountIdAlertPost(String accountId, AlertRequest body) throws ApiException {
        ApiResponse<Object> resp = iserverAccountAccountIdAlertPostWithHttpInfo(accountId, body);
        return resp.getData();
    }

    /**
     * Create or modify alert.
     * Please note here, DO NOT pass orderId when creating a new alert, toolId is only required for MTA alert
     *
     * @param accountId account id (required)
     * @param body      alert info (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> iserverAccountAccountIdAlertPostWithHttpInfo(String accountId, AlertRequest body)
            throws ApiException {
        com.squareup.okhttp.Call call = iserverAccountAccountIdAlertPostValidateBeforeCall(accountId, body, null, null);
        Type localVarReturnType = new TypeToken<Object>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call iserverAccountAccountIdAlertPostValidateBeforeCall(String accountId,
            AlertRequest body, final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException(
                    "Missing the required parameter 'accountId' when calling iserverAccountAccountIdAlertPost(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException(
                    "Missing the required parameter 'body' when calling iserverAccountAccountIdAlertPost(Async)");
        }


        com.squareup.okhttp.Call call = iserverAccountAccountIdAlertPostCall(accountId, body, progressListener,
                progressRequestListener);
        return call;

    }

    /**
     * Build call for iserverAccountAccountIdAlertPost.
     *
     * @param accountId               account id (required)
     * @param body                    alert info (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call iserverAccountAccountIdAlertPostCall(String accountId, AlertRequest body,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        final Object localVarPostBody = body;

        // create path and map variables
        final String localVarPath = "/iserver/account/{accountId}/alert".replaceAll("\\{" + "accountId" + "\\}",
                apiClient.escapeString(accountId.toString()));

        final List<Pair> localVarQueryParams = new ArrayList<Pair>();
        final List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        final Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient()
                    .networkInterceptors()
                    .add(new com.squareup.okhttp.Interceptor() {
                        @Override
                        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
                                throws IOException {
                            com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                            return originalResponse.newBuilder()
                                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                                    .build();
                        }
                    });
        }

        String[] localVarAuthNames = new String[]{};
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams,
                localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Create or modify alert (asynchronously).
     * Please note here, DO NOT pass orderId when creating a new alert, toolId is only required for MTA alert
     *
     * @param accountId account id (required)
     * @param body      alert info (required)
     * @param callback  The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call iserverAccountAccountIdAlertPostAsync(String accountId, AlertRequest body,
            final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = iserverAccountAccountIdAlertPostValidateBeforeCall(accountId, body,
                progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Get a list of available alerts.
     * The response will contain both active and inactive alerts, but it won&#39;t have MTA alert
     *
     * @param accountId account id (required)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Object> iserverAccountAccountIdAlertsGet(String accountId) throws ApiException {
        ApiResponse<List<Object>> resp = iserverAccountAccountIdAlertsGetWithHttpInfo(accountId);
        return resp.getData();
    }

    /**
     * Get a list of available alerts.
     * The response will contain both active and inactive alerts, but it won&#39;t have MTA alert
     *
     * @param accountId account id (required)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Object>> iserverAccountAccountIdAlertsGetWithHttpInfo(String accountId)
            throws ApiException {
        com.squareup.okhttp.Call call = iserverAccountAccountIdAlertsGetValidateBeforeCall(accountId, null, null);
        Type localVarReturnType = new TypeToken<List<Object>>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call iserverAccountAccountIdAlertsGetValidateBeforeCall(String accountId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException(
                    "Missing the required parameter 'accountId' when calling iserverAccountAccountIdAlertsGet(Async)");
        }


        com.squareup.okhttp.Call call = iserverAccountAccountIdAlertsGetCall(accountId, progressListener,
                progressRequestListener);
        return call;

    }

    /**
     * Build call for iserverAccountAccountIdAlertsGet.
     *
     * @param accountId               account id (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call iserverAccountAccountIdAlertsGetCall(String accountId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        final Object localVarPostBody = null;

        // create path and map variables
        final String localVarPath = "/iserver/account/{accountId}/alerts".replaceAll("\\{" + "accountId" + "\\}",
                apiClient.escapeString(accountId.toString()));

        final List<Pair> localVarQueryParams = new ArrayList<Pair>();
        final List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        final Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient()
                    .networkInterceptors()
                    .add(new com.squareup.okhttp.Interceptor() {
                        @Override
                        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
                                throws IOException {
                            com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                            return originalResponse.newBuilder()
                                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                                    .build();
                        }
                    });
        }

        String[] localVarAuthNames = new String[]{};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
                localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get a list of available alerts (asynchronously).
     * The response will contain both active and inactive alerts, but it won&#39;t have MTA alert
     *
     * @param accountId account id (required)
     * @param callback  The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call iserverAccountAccountIdAlertsGetAsync(String accountId,
            final ApiCallback<List<Object>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = iserverAccountAccountIdAlertsGetValidateBeforeCall(accountId, progressListener,
                progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Object>>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Get details of an alert
     * Use the endpoint /iserver/account/:accountId/alerts to receive the alert id. The order_id in the response is the
     * alert id.
     *
     * @param id alert id (required)
     * @return AlertResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AlertResponse iserverAccountAlertIdGet(String id) throws ApiException {
        ApiResponse<AlertResponse> resp = iserverAccountAlertIdGetWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Get details of an alert
     * Use the endpoint /iserver/account/:accountId/alerts to receive the alert id. The order_id in the response is the
     * alert id.
     *
     * @param id alert id (required)
     * @return ApiResponse&lt;AlertResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AlertResponse> iserverAccountAlertIdGetWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = iserverAccountAlertIdGetValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<AlertResponse>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call iserverAccountAlertIdGetValidateBeforeCall(String id,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling iserverAccountAlertIdGet(Async)");
        }


        com.squareup.okhttp.Call call = iserverAccountAlertIdGetCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Build call for iserverAccountAlertIdGet.
     *
     * @param id                      alert id (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call iserverAccountAlertIdGetCall(String id,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        final Object localVarPostBody = null;

        // create path and map variables
        final String localVarPath = "/iserver/account/alert/{id}".replaceAll("\\{" + "id" + "\\}",
                apiClient.escapeString(id.toString()));

        final List<Pair> localVarQueryParams = new ArrayList<Pair>();
        final List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        final Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient()
                    .networkInterceptors()
                    .add(new com.squareup.okhttp.Interceptor() {
                        @Override
                        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
                                throws IOException {
                            com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                            return originalResponse.newBuilder()
                                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                                    .build();
                        }
                    });
        }

        String[] localVarAuthNames = new String[]{};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
                localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get details of an alert (asynchronously)
     * Use the endpoint /iserver/account/:accountId/alerts to receive the alert id. The order_id in the response is the
     * alert id.
     *
     * @param id       alert id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call iserverAccountAlertIdGetAsync(String id, final ApiCallback<AlertResponse> callback)
            throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = iserverAccountAlertIdGetValidateBeforeCall(id, progressListener,
                progressRequestListener);
        Type localVarReturnType = new TypeToken<AlertResponse>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Get MTA alert
     * Each login user only has one mobile trading assistant (MTA) alert with it&#39;s own unique tool id. The tool id
     * cannot be changed. When modified a new order Id is generated. MTA alerts can not be created or deleted. If you
     * call delete /iserver/account/:accountId/alert/:alertId, it will reset MTA to default. See
     * [here](https://www.interactivebrokers.com/en/software/mobileiphonemobile/mobileiphone.htm#monitor/trading-assistant.htm)
     * for more information on MTA alerts.
     *
     * @return AlertResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AlertResponse iserverAccountMtaGet() throws ApiException {
        ApiResponse<AlertResponse> resp = iserverAccountMtaGetWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get MTA alert
     * Each login user only has one mobile trading assistant (MTA) alert with it&#39;s own unique tool id. The tool id
     * cannot be changed. When modified a new order Id is generated. MTA alerts can not be created or deleted. If you
     * call delete /iserver/account/:accountId/alert/:alertId, it will reset MTA to default. See
     * [here](https://www.interactivebrokers.com/en/software/mobileiphonemobile/mobileiphone.htm#monitor/trading-assistant.htm)
     * for more information on MTA alerts.
     *
     * @return ApiResponse&lt;AlertResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AlertResponse> iserverAccountMtaGetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = iserverAccountMtaGetValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<AlertResponse>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call iserverAccountMtaGetValidateBeforeCall(
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


        com.squareup.okhttp.Call call = iserverAccountMtaGetCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Build call for iserverAccountMtaGet.
     *
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call iserverAccountMtaGetCall(
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        final Object localVarPostBody = null;

        // create path and map variables
        final String localVarPath = "/iserver/account/mta";

        final List<Pair> localVarQueryParams = new ArrayList<Pair>();
        final List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        final Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient()
                    .networkInterceptors()
                    .add(new com.squareup.okhttp.Interceptor() {
                        @Override
                        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
                                throws IOException {
                            com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                            return originalResponse.newBuilder()
                                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                                    .build();
                        }
                    });
        }

        String[] localVarAuthNames = new String[]{};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
                localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get MTA alert (asynchronously)
     * Each login user only has one mobile trading assistant (MTA) alert with it&#39;s own unique tool id. The tool id
     * cannot be changed. When modified a new order Id is generated. MTA alerts can not be created or deleted. If you
     * call delete /iserver/account/:accountId/alert/:alertId, it will reset MTA to default. See
     * [here](https://www.interactivebrokers.com/en/software/mobileiphonemobile/mobileiphone.htm#monitor/trading-assistant.htm)
     * for more information on MTA alerts.
     *
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call iserverAccountMtaGetAsync(final ApiCallback<AlertResponse> callback)
            throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = iserverAccountMtaGetValidateBeforeCall(progressListener,
                progressRequestListener);
        Type localVarReturnType = new TypeToken<AlertResponse>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

}
