/*
 *   Copyright 2016-2022 Oleksii V. KHALIKOV
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

/*
 * Client Portal Web API
 * Client Poral Web API
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package ua.com.gfalcon.ibkr.client.okhttp.api;

import java.io.IOException;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.reflect.TypeToken;

import ua.com.gfalcon.ibkr.client.okhttp.ApiCallback;
import ua.com.gfalcon.ibkr.client.okhttp.ApiClient;
import ua.com.gfalcon.ibkr.client.okhttp.ApiException;
import ua.com.gfalcon.ibkr.client.okhttp.ApiResponse;
import ua.com.gfalcon.ibkr.client.okhttp.Configuration;
import ua.com.gfalcon.ibkr.client.okhttp.Pair;
import ua.com.gfalcon.ibkr.client.okhttp.ProgressRequestBody;
import ua.com.gfalcon.ibkr.client.okhttp.ProgressResponseBody;
import ua.com.gfalcon.ibkr.model.Auth;
import ua.com.gfalcon.ibkr.model.OrderData;
import ua.com.gfalcon.ibkr.model.PositionData;

/**
 * CCP Beta Api.
 */
public class CcpBetaApi {

    private ApiClient apiClient;

    public CcpBetaApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CcpBetaApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Brokerage Accounts.
     * Provides the list of tradeable accounts
     *
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object ccpAccountGet() throws ApiException {
        ApiResponse<Object> resp = ccpAccountGetWithHttpInfo();
        return resp.getData();
    }

    /**
     * Brokerage Accounts.
     * Provides the list of tradeable accounts
     *
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> ccpAccountGetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = ccpAccountGetValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<Object>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ccpAccountGetValidateBeforeCall(
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


        com.squareup.okhttp.Call call = ccpAccountGetCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Build call for ccpAccountGet.
     *
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ccpAccountGetCall(final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        final Object localVarPostBody = null;

        // create path and map variables
        final String localVarPath = "/ccp/account";

        final List<Pair> localVarQueryParams = new ArrayList<Pair>();
        final List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        final Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient()
                    .networkInterceptors()
                    .add(new com.squareup.okhttp.Interceptor() {
                        @Override
                        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
                                throws IOException {
                            com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                            return originalResponse.newBuilder()
                                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                                    .build();
                        }
                    });
        }

        String[] localVarAuthNames = new String[]{};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
                localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Brokerage Accounts (asynchronously).
     * Provides the list of tradeable accounts
     *
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ccpAccountGetAsync(final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ccpAccountGetValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Start CCP Session
     * Initiate a brokerage session to CCP. Only one brokerage session type can run at a time. If an existing brokerage
     * session to iServer is running then call the endpoint /logout first. Note at this time only order management is
     * possible from CCP session, market data and scanner endpoints can&#39;t be used since they are only available from
     * iServer session. Work is in progress to provide new CCP endpoints for market data and scanners.
     *
     * @param compete   Allow competing CCP session to run (optional)
     * @param locale    Concatenate value for language and region, set to \&quot;en_US\&quot; (optional)
     * @param mac       Local MAC Address (optional)
     * @param machineId Local machine ID (optional)
     * @param username  Login user, set to dash \&quot;-\&quot; (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object ccpAuthInitPost(Boolean compete, String locale, String mac, String machineId, String username)
            throws ApiException {
        ApiResponse<Object> resp = ccpAuthInitPostWithHttpInfo(compete, locale, mac, machineId, username);
        return resp.getData();
    }

    /**
     * Start CCP Session
     * Initiate a brokerage session to CCP. Only one brokerage session type can run at a time. If an existing brokerage
     * session to iServer is running then call the endpoint /logout first. Note at this time only order management is
     * possible from CCP session, market data and scanner endpoints can&#39;t be used since they are only available from
     * iServer session. Work is in progress to provide new CCP endpoints for market data and scanners.
     *
     * @param compete   Allow competing CCP session to run (optional)
     * @param locale    Concatenate value for language and region, set to \&quot;en_US\&quot; (optional)
     * @param mac       Local MAC Address (optional)
     * @param machineId Local machine ID (optional)
     * @param username  Login user, set to dash \&quot;-\&quot; (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> ccpAuthInitPostWithHttpInfo(Boolean compete, String locale, String mac, String machineId,
            String username) throws ApiException {
        com.squareup.okhttp.Call call = ccpAuthInitPostValidateBeforeCall(compete, locale, mac, machineId, username,
                null, null);
        Type localVarReturnType = new TypeToken<Object>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ccpAuthInitPostValidateBeforeCall(Boolean compete, String locale, String mac,
            String machineId, String username, final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


        com.squareup.okhttp.Call call = ccpAuthInitPostCall(compete, locale, mac, machineId, username, progressListener,
                progressRequestListener);
        return call;

    }

    /**
     * Build call for ccpAuthInitPost.
     *
     * @param compete                 Allow competing CCP session to run (optional)
     * @param locale                  Concatenate value for language and region, set to \&quot;en_US\&quot; (optional)
     * @param mac                     Local MAC Address (optional)
     * @param machineId               Local machine ID (optional)
     * @param username                Login user, set to dash \&quot;-\&quot; (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ccpAuthInitPostCall(Boolean compete, String locale, String mac, String machineId,
            String username, final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        final Object localVarPostBody = null;

        // create path and map variables
        final String localVarPath = "/ccp/auth/init";

        final List<Pair> localVarQueryParams = new ArrayList<Pair>();
        final List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (compete != null) {
            localVarFormParams.put("compete", compete);
        }
        if (locale != null) {
            localVarFormParams.put("locale", locale);
        }
        if (mac != null) {
            localVarFormParams.put("mac", mac);
        }
        if (machineId != null) {
            localVarFormParams.put("machineId", machineId);
        }
        if (username != null) {
            localVarFormParams.put("username", username);
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient()
                    .networkInterceptors()
                    .add(new com.squareup.okhttp.Interceptor() {
                        @Override
                        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
                                throws IOException {
                            com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                            return originalResponse.newBuilder()
                                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                                    .build();
                        }
                    });
        }

        String[] localVarAuthNames = new String[]{};
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams,
                localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Start CCP Session (asynchronously)
     * Initiate a brokerage session to CCP. Only one brokerage session type can run at a time. If an existing brokerage
     * session to iServer is running then call the endpoint /logout first. Note at this time only order management is
     * possible from CCP session, market data and scanner endpoints can&#39;t be used since they are only available from
     * iServer session. Work is in progress to provide new CCP endpoints for market data and scanners.
     *
     * @param compete   Allow competing CCP session to run (optional)
     * @param locale    Concatenate value for language and region, set to \&quot;en_US\&quot; (optional)
     * @param mac       Local MAC Address (optional)
     * @param machineId Local machine ID (optional)
     * @param username  Login user, set to dash \&quot;-\&quot; (optional)
     * @param callback  The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ccpAuthInitPostAsync(Boolean compete, String locale, String mac, String machineId,
            String username, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ccpAuthInitPostValidateBeforeCall(compete, locale, mac, machineId, username,
                progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Complete CCP Session.
     * Session Token Authentication
     *
     * @param auth (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object ccpAuthResponsePost(Auth auth) throws ApiException {
        ApiResponse<Object> resp = ccpAuthResponsePostWithHttpInfo(auth);
        return resp.getData();
    }

    /**
     * Complete CCP Session.
     * Session Token Authentication
     *
     * @param auth (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> ccpAuthResponsePostWithHttpInfo(Auth auth) throws ApiException {
        com.squareup.okhttp.Call call = ccpAuthResponsePostValidateBeforeCall(auth, null, null);
        Type localVarReturnType = new TypeToken<Object>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ccpAuthResponsePostValidateBeforeCall(Auth auth,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


        com.squareup.okhttp.Call call = ccpAuthResponsePostCall(auth, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Build call for ccpAuthResponsePost.
     *
     * @param auth                    (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ccpAuthResponsePostCall(Auth auth,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        final Object localVarPostBody = auth;

        // create path and map variables
        final String localVarPath = "/ccp/auth/response";

        final List<Pair> localVarQueryParams = new ArrayList<Pair>();
        final List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        final Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient()
                    .networkInterceptors()
                    .add(new com.squareup.okhttp.Interceptor() {
                        @Override
                        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
                                throws IOException {
                            com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                            return originalResponse.newBuilder()
                                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                                    .build();
                        }
                    });
        }

        String[] localVarAuthNames = new String[]{};
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams,
                localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Complete CCP Session (asynchronously).
     * Session Token Authentication
     *
     * @param auth     (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ccpAuthResponsePostAsync(Auth auth, final ApiCallback<Object> callback)
            throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ccpAuthResponsePostValidateBeforeCall(auth, progressListener,
                progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Delete Order
     * Sends an Order cancellation request. The status of the order can be queried through /ccp/order. Passing arguments
     * as GET is also supported (requires passing action&#x3D;delete) (GET is meant for development only)
     *
     * @param acct Account Number (required)
     * @param id   Order Identifier of original submit order (required)
     * @return OrderData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OrderData ccpOrderDelete(String acct, BigDecimal id) throws ApiException {
        ApiResponse<OrderData> resp = ccpOrderDeleteWithHttpInfo(acct, id);
        return resp.getData();
    }

    /**
     * Delete Order
     * Sends an Order cancellation request. The status of the order can be queried through /ccp/order. Passing arguments
     * as GET is also supported (requires passing action&#x3D;delete) (GET is meant for development only)
     *
     * @param acct Account Number (required)
     * @param id   Order Identifier of original submit order (required)
     * @return ApiResponse&lt;OrderData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OrderData> ccpOrderDeleteWithHttpInfo(String acct, BigDecimal id) throws ApiException {
        com.squareup.okhttp.Call call = ccpOrderDeleteValidateBeforeCall(acct, id, null, null);
        Type localVarReturnType = new TypeToken<OrderData>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ccpOrderDeleteValidateBeforeCall(String acct, BigDecimal id,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'acct' is set
        if (acct == null) {
            throw new ApiException("Missing the required parameter 'acct' when calling ccpOrderDelete(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ccpOrderDelete(Async)");
        }


        com.squareup.okhttp.Call call = ccpOrderDeleteCall(acct, id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Build call for ccpOrderDelete.
     *
     * @param acct                    Account Number (required)
     * @param id                      Order Identifier of original submit order (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ccpOrderDeleteCall(String acct, BigDecimal id,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        final Object localVarPostBody = null;

        // create path and map variables
        final String localVarPath = "/ccp/order";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        final List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (acct != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("acct", acct));
        }
        if (id != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        final Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient()
                    .networkInterceptors()
                    .add(new com.squareup.okhttp.Interceptor() {
                        @Override
                        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
                                throws IOException {
                            com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                            return originalResponse.newBuilder()
                                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                                    .build();
                        }
                    });
        }

        String[] localVarAuthNames = new String[]{};
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams,
                localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Delete Order (asynchronously)
     * Sends an Order cancellation request. The status of the order can be queried through /ccp/order. Passing arguments
     * as GET is also supported (requires passing action&#x3D;delete) (GET is meant for development only)
     *
     * @param acct     Account Number (required)
     * @param id       Order Identifier of original submit order (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ccpOrderDeleteAsync(String acct, BigDecimal id,
            final ApiCallback<OrderData> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ccpOrderDeleteValidateBeforeCall(acct, id, progressListener,
                progressRequestListener);
        Type localVarReturnType = new TypeToken<OrderData>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Submit Order
     * Submits an Order.
     *
     * @param acct     User Account (required)
     * @param conid    Contract identifier from IBKR&#39;s database. (required)
     * @param ccy      Contract Currency (required)
     * @param exchange Exchange (required)
     * @param qty      Order Quantity (required)
     * @param type     Order Price; required if order type is limit (optional)
     * @param side     Side (optional)
     * @param price    Order Price; required if order type is limit (optional)
     * @param tif      Time in Force (optional)
     * @return OrderData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    @SuppressWarnings("checkstyle:ParameterNumber")
    public OrderData ccpOrderPost(String acct, BigDecimal conid, String ccy, String exchange, BigDecimal qty,
            String type, String side, BigDecimal price, String tif) throws ApiException {
        ApiResponse<OrderData> resp = ccpOrderPostWithHttpInfo(acct, conid, ccy, exchange, qty, type, side, price, tif);
        return resp.getData();
    }

    /**
     * Submit Order
     * Submits an Order.
     *
     * @param acct     User Account (required)
     * @param conid    Contract identifier from IBKR&#39;s database. (required)
     * @param ccy      Contract Currency (required)
     * @param exchange Exchange (required)
     * @param qty      Order Quantity (required)
     * @param type     Order Price; required if order type is limit (optional)
     * @param side     Side (optional)
     * @param price    Order Price; required if order type is limit (optional)
     * @param tif      Time in Force (optional)
     * @return ApiResponse&lt;OrderData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    @SuppressWarnings("checkstyle:ParameterNumber")
    public ApiResponse<OrderData> ccpOrderPostWithHttpInfo(String acct, BigDecimal conid, String ccy, String exchange,
            BigDecimal qty, String type, String side, BigDecimal price, String tif) throws ApiException {
        com.squareup.okhttp.Call call = ccpOrderPostValidateBeforeCall(acct, conid, ccy, exchange, qty, type, side,
                price, tif, null, null);
        Type localVarReturnType = new TypeToken<OrderData>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    @SuppressWarnings({"rawtypes", "checkstyle:ParameterNumber"})
    private com.squareup.okhttp.Call ccpOrderPostValidateBeforeCall(String acct, BigDecimal conid, String ccy,
            String exchange, BigDecimal qty, String type, String side, BigDecimal price, String tif,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'acct' is set
        if (acct == null) {
            throw new ApiException("Missing the required parameter 'acct' when calling ccpOrderPost(Async)");
        }

        // verify the required parameter 'conid' is set
        if (conid == null) {
            throw new ApiException("Missing the required parameter 'conid' when calling ccpOrderPost(Async)");
        }

        // verify the required parameter 'ccy' is set
        if (ccy == null) {
            throw new ApiException("Missing the required parameter 'ccy' when calling ccpOrderPost(Async)");
        }

        // verify the required parameter 'exchange' is set
        if (exchange == null) {
            throw new ApiException("Missing the required parameter 'exchange' when calling ccpOrderPost(Async)");
        }

        // verify the required parameter 'qty' is set
        if (qty == null) {
            throw new ApiException("Missing the required parameter 'qty' when calling ccpOrderPost(Async)");
        }


        com.squareup.okhttp.Call call = ccpOrderPostCall(acct, conid, ccy, exchange, qty, type, side, price, tif,
                progressListener, progressRequestListener);
        return call;

    }

    /**
     * Build call for ccpOrderPost.
     *
     * @param acct                    User Account (required)
     * @param conid                   Contract identifier from IBKR&#39;s database. (required)
     * @param ccy                     Contract Currency (required)
     * @param exchange                Exchange (required)
     * @param qty                     Order Quantity (required)
     * @param type                    Order Price; required if order type is limit (optional)
     * @param side                    Side (optional)
     * @param price                   Order Price; required if order type is limit (optional)
     * @param tif                     Time in Force (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    @SuppressWarnings("checkstyle:ParameterNumber")
    public com.squareup.okhttp.Call ccpOrderPostCall(String acct, BigDecimal conid, String ccy, String exchange,
            BigDecimal qty, String type, String side, BigDecimal price, String tif,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        final Object localVarPostBody = null;

        // create path and map variables
        final String localVarPath = "/ccp/order";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        final List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (acct != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("acct", acct));
        }
        if (conid != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("conid", conid));
        }
        if (ccy != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("ccy", ccy));
        }
        if (exchange != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("exchange", exchange));
        }
        if (qty != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("qty", qty));
        }
        if (type != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
        }
        if (side != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("side", side));
        }
        if (price != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("price", price));
        }
        if (tif != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("tif", tif));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        final Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient()
                    .networkInterceptors()
                    .add(new com.squareup.okhttp.Interceptor() {
                        @Override
                        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
                                throws IOException {
                            com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                            return originalResponse.newBuilder()
                                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                                    .build();
                        }
                    });
        }

        String[] localVarAuthNames = new String[]{};
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams,
                localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Submit Order (asynchronously)
     * Submits an Order.
     *
     * @param acct     User Account (required)
     * @param conid    Contract identifier from IBKR&#39;s database. (required)
     * @param ccy      Contract Currency (required)
     * @param exchange Exchange (required)
     * @param qty      Order Quantity (required)
     * @param type     Order Price; required if order type is limit (optional)
     * @param side     Side (optional)
     * @param price    Order Price; required if order type is limit (optional)
     * @param tif      Time in Force (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    @SuppressWarnings("checkstyle:ParameterNumber")
    public com.squareup.okhttp.Call ccpOrderPostAsync(String acct, BigDecimal conid, String ccy, String exchange,
            BigDecimal qty, String type, String side, BigDecimal price, String tif,
            final ApiCallback<OrderData> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ccpOrderPostValidateBeforeCall(acct, conid, ccy, exchange, qty, type, side,
                price, tif, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OrderData>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Update Order
     * Updates an Order. Updating an order requires the same arguments as placing an order besides the conid. Note: The
     * status of the order can be queried through GET /ccp/order.
     *
     * @param acct User Account (required)
     * @param id   Order ID to be modified (required)
     * @return OrderData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OrderData ccpOrderPut(String acct, BigDecimal id) throws ApiException {
        ApiResponse<OrderData> resp = ccpOrderPutWithHttpInfo(acct, id);
        return resp.getData();
    }

    /**
     * Update Order
     * Updates an Order. Updating an order requires the same arguments as placing an order besides the conid. Note: The
     * status of the order can be queried through GET /ccp/order.
     *
     * @param acct User Account (required)
     * @param id   Order ID to be modified (required)
     * @return ApiResponse&lt;OrderData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OrderData> ccpOrderPutWithHttpInfo(String acct, BigDecimal id) throws ApiException {
        com.squareup.okhttp.Call call = ccpOrderPutValidateBeforeCall(acct, id, null, null);
        Type localVarReturnType = new TypeToken<OrderData>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ccpOrderPutValidateBeforeCall(String acct, BigDecimal id,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'acct' is set
        if (acct == null) {
            throw new ApiException("Missing the required parameter 'acct' when calling ccpOrderPut(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ccpOrderPut(Async)");
        }


        com.squareup.okhttp.Call call = ccpOrderPutCall(acct, id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Build call for ccpOrderPut.
     *
     * @param acct                    User Account (required)
     * @param id                      Order ID to be modified (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ccpOrderPutCall(String acct, BigDecimal id,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        final Object localVarPostBody = null;

        // create path and map variables
        final String localVarPath = "/ccp/order";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        final List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (acct != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("acct", acct));
        }
        if (id != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        final Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient()
                    .networkInterceptors()
                    .add(new com.squareup.okhttp.Interceptor() {
                        @Override
                        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
                                throws IOException {
                            com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                            return originalResponse.newBuilder()
                                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                                    .build();
                        }
                    });
        }

        String[] localVarAuthNames = new String[]{};
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams,
                localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Update Order (asynchronously)
     * Updates an Order. Updating an order requires the same arguments as placing an order besides the conid. Note: The
     * status of the order can be queried through GET /ccp/order.
     *
     * @param acct     User Account (required)
     * @param id       Order ID to be modified (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ccpOrderPutAsync(String acct, BigDecimal id, final ApiCallback<OrderData> callback)
            throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ccpOrderPutValidateBeforeCall(acct, id, progressListener,
                progressRequestListener);
        Type localVarReturnType = new TypeToken<OrderData>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Order Status.
     * Get status for all orders
     *
     * @param acct      User Account (required)
     * @param cancelled Return only Rejected or Cancelled orders since today midnight (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object ccpOrdersGet(String acct, Boolean cancelled) throws ApiException {
        ApiResponse<Object> resp = ccpOrdersGetWithHttpInfo(acct, cancelled);
        return resp.getData();
    }

    /**
     * Order Status.
     * Get status for all orders
     *
     * @param acct      User Account (required)
     * @param cancelled Return only Rejected or Cancelled orders since today midnight (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> ccpOrdersGetWithHttpInfo(String acct, Boolean cancelled) throws ApiException {
        com.squareup.okhttp.Call call = ccpOrdersGetValidateBeforeCall(acct, cancelled, null, null);
        Type localVarReturnType = new TypeToken<Object>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ccpOrdersGetValidateBeforeCall(String acct, Boolean cancelled,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'acct' is set
        if (acct == null) {
            throw new ApiException("Missing the required parameter 'acct' when calling ccpOrdersGet(Async)");
        }


        com.squareup.okhttp.Call call = ccpOrdersGetCall(acct, cancelled, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Build call for ccpOrdersGet.
     *
     * @param acct                    User Account (required)
     * @param cancelled               Return only Rejected or Cancelled orders since today midnight (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ccpOrdersGetCall(String acct, Boolean cancelled,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        final Object localVarPostBody = null;

        // create path and map variables
        final String localVarPath = "/ccp/orders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        final List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (acct != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("acct", acct));
        }
        if (cancelled != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("cancelled", cancelled));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        final Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient()
                    .networkInterceptors()
                    .add(new com.squareup.okhttp.Interceptor() {
                        @Override
                        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
                                throws IOException {
                            com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                            return originalResponse.newBuilder()
                                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                                    .build();
                        }
                    });
        }

        String[] localVarAuthNames = new String[]{};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
                localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Order Status (asynchronously).
     * Get status for all orders
     *
     * @param acct      User Account (required)
     * @param cancelled Return only Rejected or Cancelled orders since today midnight (optional)
     * @param callback  The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ccpOrdersGetAsync(String acct, Boolean cancelled,
            final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ccpOrdersGetValidateBeforeCall(acct, cancelled, progressListener,
                progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Positions.
     * List of positions
     *
     * @return PositionData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PositionData ccpPositionsGet() throws ApiException {
        ApiResponse<PositionData> resp = ccpPositionsGetWithHttpInfo();
        return resp.getData();
    }

    /**
     * Positions.
     * List of positions
     *
     * @return ApiResponse&lt;PositionData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PositionData> ccpPositionsGetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = ccpPositionsGetValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<PositionData>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ccpPositionsGetValidateBeforeCall(
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


        com.squareup.okhttp.Call call = ccpPositionsGetCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Build call for ccpPositionsGet.
     *
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ccpPositionsGetCall(final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        final Object localVarPostBody = null;

        // create path and map variables
        final String localVarPath = "/ccp/positions";

        final List<Pair> localVarQueryParams = new ArrayList<Pair>();
        final List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        final Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient()
                    .networkInterceptors()
                    .add(new com.squareup.okhttp.Interceptor() {
                        @Override
                        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
                                throws IOException {
                            com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                            return originalResponse.newBuilder()
                                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                                    .build();
                        }
                    });
        }

        String[] localVarAuthNames = new String[]{};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
                localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Positions (asynchronously).
     * List of positions
     *
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ccpPositionsGetAsync(final ApiCallback<PositionData> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ccpPositionsGetValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PositionData>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * CCP Status
     * Provide the current CCP session status. When using the Gateway this endpoint will also initiate a brokerage
     * session to CCP by sending /auth/init and response.
     *
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object ccpStatusGet() throws ApiException {
        ApiResponse<Object> resp = ccpStatusGetWithHttpInfo();
        return resp.getData();
    }

    /**
     * CCP Status
     * Provide the current CCP session status. When using the Gateway this endpoint will also initiate a brokerage
     * session to CCP by sending /auth/init and response.
     *
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> ccpStatusGetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = ccpStatusGetValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<Object>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ccpStatusGetValidateBeforeCall(
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


        com.squareup.okhttp.Call call = ccpStatusGetCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Build call for ccpStatusGet.
     *
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ccpStatusGetCall(final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        final Object localVarPostBody = null;

        // create path and map variables
        final String localVarPath = "/ccp/status";

        final List<Pair> localVarQueryParams = new ArrayList<Pair>();
        final List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        final Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient()
                    .networkInterceptors()
                    .add(new com.squareup.okhttp.Interceptor() {
                        @Override
                        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
                                throws IOException {
                            com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                            return originalResponse.newBuilder()
                                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                                    .build();
                        }
                    });
        }

        String[] localVarAuthNames = new String[]{};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
                localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * CCP Status (asynchronously)
     * Provide the current CCP session status. When using the Gateway this endpoint will also initiate a brokerage
     * session to CCP by sending /auth/init and response.
     *
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ccpStatusGetAsync(final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ccpStatusGetValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Trades
     * Get a list of Trades, by default, the list is from today midnight to Date.now().
     *
     * @param from From Date (YYYYMMDD-HH:mm:ss) or offset (-1,-2,-3..) (optional)
     * @param to   To Date (YYYYMMDD-HH:mm:ss) or offset (-1,-2,-3..). To value should be bigger than from value.
     *             (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object ccpTradesGet(String from, String to) throws ApiException {
        ApiResponse<Object> resp = ccpTradesGetWithHttpInfo(from, to);
        return resp.getData();
    }

    /**
     * Trades
     * Get a list of Trades, by default, the list is from today midnight to Date.now().
     *
     * @param from From Date (YYYYMMDD-HH:mm:ss) or offset (-1,-2,-3..) (optional)
     * @param to   To Date (YYYYMMDD-HH:mm:ss) or offset (-1,-2,-3..). To value should be bigger than from value.
     *             (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> ccpTradesGetWithHttpInfo(String from, String to) throws ApiException {
        com.squareup.okhttp.Call call = ccpTradesGetValidateBeforeCall(from, to, null, null);
        Type localVarReturnType = new TypeToken<Object>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ccpTradesGetValidateBeforeCall(String from, String to,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


        com.squareup.okhttp.Call call = ccpTradesGetCall(from, to, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Build call for ccpTradesGet.
     *
     * @param from                    From Date (YYYYMMDD-HH:mm:ss) or offset (-1,-2,-3..) (optional)
     * @param to                      To Date (YYYYMMDD-HH:mm:ss) or offset (-1,-2,-3..). To value should be bigger than
     *                                from value.  (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ccpTradesGetCall(String from, String to,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        final Object localVarPostBody = null;

        // create path and map variables
        final String localVarPath = "/ccp/trades";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        final List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (from != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("from", from));
        }
        if (to != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("to", to));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        final Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient()
                    .networkInterceptors()
                    .add(new com.squareup.okhttp.Interceptor() {
                        @Override
                        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
                                throws IOException {
                            com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                            return originalResponse.newBuilder()
                                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                                    .build();
                        }
                    });
        }

        String[] localVarAuthNames = new String[]{};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
                localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Trades (asynchronously)
     * Get a list of Trades, by default, the list is from today midnight to Date.now().
     *
     * @param from     From Date (YYYYMMDD-HH:mm:ss) or offset (-1,-2,-3..) (optional)
     * @param to       To Date (YYYYMMDD-HH:mm:ss) or offset (-1,-2,-3..). To value should be bigger than from value.
     *                 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ccpTradesGetAsync(String from, String to, final ApiCallback<Object> callback)
            throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ccpTradesGetValidateBeforeCall(from, to, progressListener,
                progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

}
