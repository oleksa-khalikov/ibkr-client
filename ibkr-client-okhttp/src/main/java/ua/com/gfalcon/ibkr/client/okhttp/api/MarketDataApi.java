/*
 *   Copyright 2016-2022 Oleksii V. KHALIKOV
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

/*
 * Client Portal Web API
 * Client Poral Web API
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package ua.com.gfalcon.ibkr.client.okhttp.api;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.reflect.TypeToken;

import ua.com.gfalcon.ibkr.client.okhttp.ApiCallback;
import ua.com.gfalcon.ibkr.client.okhttp.ApiClient;
import ua.com.gfalcon.ibkr.client.okhttp.ApiException;
import ua.com.gfalcon.ibkr.client.okhttp.ApiResponse;
import ua.com.gfalcon.ibkr.client.okhttp.Configuration;
import ua.com.gfalcon.ibkr.client.okhttp.Pair;
import ua.com.gfalcon.ibkr.client.okhttp.ProgressRequestBody;
import ua.com.gfalcon.ibkr.client.okhttp.ProgressResponseBody;
import ua.com.gfalcon.ibkr.model.BooleanConfirmed;
import ua.com.gfalcon.ibkr.model.HistoryData;
import ua.com.gfalcon.ibkr.model.MarketData;
import ua.com.gfalcon.ibkr.model.MarketDataCancelSingle;

/**
 * MarketData Api.
 */
public class MarketDataApi {

    private ApiClient apiClient;

    public MarketDataApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MarketDataApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Market Data Cancel (Single)
     * Cancel market data for given conid. To cancel all market data request(s), see /iserver/marketdata/unsubscribeall.
     *
     * @param conid contract id (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MarketDataCancelSingle iserverMarketdataConidUnsubscribeGet(String conid) throws ApiException {
        ApiResponse<MarketDataCancelSingle> resp = iserverMarketdataConidUnsubscribeGetWithHttpInfo(conid);
        return resp.getData();
    }

    /**
     * Market Data Cancel (Single)
     * Cancel market data for given conid. To cancel all market data request(s), see /iserver/marketdata/unsubscribeall.
     *
     * @param conid contract id (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MarketDataCancelSingle> iserverMarketdataConidUnsubscribeGetWithHttpInfo(String conid)
            throws ApiException {
        com.squareup.okhttp.Call call = iserverMarketdataConidUnsubscribeGetValidateBeforeCall(conid, null, null);
        Type localVarReturnType = new TypeToken<MarketDataCancelSingle>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call iserverMarketdataConidUnsubscribeGetValidateBeforeCall(String conid,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'conid' is set
        if (conid == null) {
            throw new ApiException(
                    "Missing the required parameter 'conid' when calling iserverMarketdataConidUnsubscribeGet(Async)");
        }


        com.squareup.okhttp.Call call = iserverMarketdataConidUnsubscribeGetCall(conid, progressListener,
                progressRequestListener);
        return call;

    }

    /**
     * Build call for iserverMarketdataConidUnsubscribeGet.
     *
     * @param conid                   contract id (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call iserverMarketdataConidUnsubscribeGetCall(String conid,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        final Object localVarPostBody = null;

        // create path and map variables
        final String localVarPath = "/iserver/marketdata/{conid}/unsubscribe".replaceAll("\\{" + "conid" + "\\}",
                apiClient.escapeString(conid.toString()));

        final List<Pair> localVarQueryParams = new ArrayList<Pair>();
        final List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        final Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient()
                    .networkInterceptors()
                    .add(new com.squareup.okhttp.Interceptor() {
                        @Override
                        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
                                throws IOException {
                            com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                            return originalResponse.newBuilder()
                                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                                    .build();
                        }
                    });
        }

        String[] localVarAuthNames = new String[]{};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
                localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Market Data Cancel (Single) (asynchronously)
     * Cancel market data for given conid. To cancel all market data request(s), see /iserver/marketdata/unsubscribeall.
     *
     * @param conid    contract id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call iserverMarketdataConidUnsubscribeGetAsync(String conid,
            final ApiCallback<MarketDataCancelSingle> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = iserverMarketdataConidUnsubscribeGetValidateBeforeCall(conid, progressListener,
                progressRequestListener);
        Type localVarReturnType = new TypeToken<MarketDataCancelSingle>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Market Data History
     * Get historical market Data for given conid, length of data is controlled by &#39;period&#39; and &#39;bar&#39;.
     * Formatted as: min&#x3D;minute, h&#x3D;hour, d&#x3D;day, w&#x3D;week, m&#x3D;month, y&#x3D;year e.g. period
     * &#x3D;1y with bar &#x3D;1w returns 52 data points (Max of 1000 data points supported). **Note**: There&#39;s a
     * limit of 5 concurrent requests. Excessive requests will return a &#39;Too many requests&#39; status 429
     * response.
     *
     * @param conid      contract id (required)
     * @param period     available time period-- {1-30}min, {1-8}h, {1-1000}d, {1-792}w, {1-182}m, {1-15}y (required)
     * @param exchange   Exchange of the conid (e.g. ISLAND, NYSE, etc.). Default value is empty which corresponds to
     *                   primary exchange of the conid. (optional)
     * @param bar        possible value-- 1min, 2min, 3min, 5min, 10min, 15min, 30min, 1h, 2h, 3h, 4h, 8h, 1d, 1w, 1m
     *                   (optional)
     * @param outsideRth For contracts that support it, will determine if historical data includes outside of regular
     *                   trading hours. (optional)
     * @return HistoryData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HistoryData iserverMarketdataHistoryGet(String conid, String period, String exchange, String bar,
            Boolean outsideRth) throws ApiException {
        ApiResponse<HistoryData> resp = iserverMarketdataHistoryGetWithHttpInfo(conid, period, exchange, bar,
                outsideRth);
        return resp.getData();
    }

    /**
     * Market Data History
     * Get historical market Data for given conid, length of data is controlled by &#39;period&#39; and &#39;bar&#39;.
     * Formatted as: min&#x3D;minute, h&#x3D;hour, d&#x3D;day, w&#x3D;week, m&#x3D;month, y&#x3D;year e.g. period
     * &#x3D;1y with bar &#x3D;1w returns 52 data points (Max of 1000 data points supported). **Note**: There&#39;s a
     * limit of 5 concurrent requests. Excessive requests will return a &#39;Too many requests&#39; status 429
     * response.
     *
     * @param conid      contract id (required)
     * @param period     available time period-- {1-30}min, {1-8}h, {1-1000}d, {1-792}w, {1-182}m, {1-15}y (required)
     * @param exchange   Exchange of the conid (e.g. ISLAND, NYSE, etc.). Default value is empty which corresponds to
     *                   primary exchange of the conid. (optional)
     * @param bar        possible value-- 1min, 2min, 3min, 5min, 10min, 15min, 30min, 1h, 2h, 3h, 4h, 8h, 1d, 1w, 1m
     *                   (optional)
     * @param outsideRth For contracts that support it, will determine if historical data includes outside of regular
     *                   trading hours. (optional)
     * @return ApiResponse&lt;HistoryData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HistoryData> iserverMarketdataHistoryGetWithHttpInfo(String conid, String period,
            String exchange, String bar, Boolean outsideRth) throws ApiException {
        com.squareup.okhttp.Call call = iserverMarketdataHistoryGetValidateBeforeCall(conid, period, exchange, bar,
                outsideRth, null, null);
        Type localVarReturnType = new TypeToken<HistoryData>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call iserverMarketdataHistoryGetValidateBeforeCall(String conid, String period,
            String exchange, String bar, Boolean outsideRth,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'conid' is set
        if (conid == null) {
            throw new ApiException(
                    "Missing the required parameter 'conid' when calling iserverMarketdataHistoryGet(Async)");
        }

        // verify the required parameter 'period' is set
        if (period == null) {
            throw new ApiException(
                    "Missing the required parameter 'period' when calling iserverMarketdataHistoryGet(Async)");
        }


        com.squareup.okhttp.Call call = iserverMarketdataHistoryGetCall(conid, period, exchange, bar, outsideRth,
                progressListener, progressRequestListener);
        return call;

    }

    /**
     * Build call for iserverMarketdataHistoryGet.
     *
     * @param conid                   contract id (required)
     * @param period                  available time period-- {1-30}min, {1-8}h, {1-1000}d, {1-792}w, {1-182}m, {1-15}y
     *                                (required)
     * @param exchange                Exchange of the conid (e.g. ISLAND, NYSE, etc.). Default value is empty which
     *                                corresponds to primary exchange of the conid. (optional)
     * @param bar                     possible value-- 1min, 2min, 3min, 5min, 10min, 15min, 30min, 1h, 2h, 3h, 4h, 8h,
     *                                1d, 1w, 1m (optional)
     * @param outsideRth              For contracts that support it, will determine if historical data includes outside
     *                                of regular trading hours. (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call iserverMarketdataHistoryGetCall(String conid, String period, String exchange,
            String bar, Boolean outsideRth, final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        final Object localVarPostBody = null;

        // create path and map variables
        final String localVarPath = "/iserver/marketdata/history";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        final List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (conid != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("conid", conid));
        }
        if (exchange != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("exchange", exchange));
        }
        if (period != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("period", period));
        }
        if (bar != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("bar", bar));
        }
        if (outsideRth != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("outsideRth", outsideRth));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        final Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient()
                    .networkInterceptors()
                    .add(new com.squareup.okhttp.Interceptor() {
                        @Override
                        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
                                throws IOException {
                            com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                            return originalResponse.newBuilder()
                                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                                    .build();
                        }
                    });
        }

        String[] localVarAuthNames = new String[]{};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
                localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Market Data History (asynchronously)
     * Get historical market Data for given conid, length of data is controlled by &#39;period&#39; and &#39;bar&#39;.
     * Formatted as: min&#x3D;minute, h&#x3D;hour, d&#x3D;day, w&#x3D;week, m&#x3D;month, y&#x3D;year e.g. period
     * &#x3D;1y with bar &#x3D;1w returns 52 data points (Max of 1000 data points supported). **Note**: There&#39;s a
     * limit of 5 concurrent requests. Excessive requests will return a &#39;Too many requests&#39; status 429
     * response.
     *
     * @param conid      contract id (required)
     * @param period     available time period-- {1-30}min, {1-8}h, {1-1000}d, {1-792}w, {1-182}m, {1-15}y (required)
     * @param exchange   Exchange of the conid (e.g. ISLAND, NYSE, etc.). Default value is empty which corresponds to
     *                   primary exchange of the conid. (optional)
     * @param bar        possible value-- 1min, 2min, 3min, 5min, 10min, 15min, 30min, 1h, 2h, 3h, 4h, 8h, 1d, 1w, 1m
     *                   (optional)
     * @param outsideRth For contracts that support it, will determine if historical data includes outside of regular
     *                   trading hours. (optional)
     * @param callback   The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call iserverMarketdataHistoryGetAsync(String conid, String period, String exchange,
            String bar, Boolean outsideRth, final ApiCallback<HistoryData> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = iserverMarketdataHistoryGetValidateBeforeCall(conid, period, exchange, bar,
                outsideRth, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HistoryData>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Market Data
     * Get Market Data for the given conid(s). The endpoint will return by default bid, ask, last, change, change pct,
     * close, listing exchange. See response fields for a list of available fields that can be request via fields
     * argument. The endpoint /iserver/accounts must be called prior to /iserver/marketdata/snapshot. For derivative
     * contracts the endpoint /iserver/secdef/search must be called first.  If you call any other endpoints that relays
     * back market data for the same contract, such as /iserver/contract/rules then you must query market data again to
     * ensure all fields are properly returned.  First /snapshot endpoint call for given conid will initiate the market
     * data request.  To receive all available fields the /snapshot endpoint will need to be called several times. To
     * receive streaming market data the endpoint /ws can be used. Refer to [Streaming WebSocket
     * Data](https://interactivebrokers.github.io/cpwebapi/RealtimeSubscription.html) for details.
     *
     * @param conids list of conids separated by comma (required)
     * @param since  time period since which updates are required. uses epoch time with milliseconds. (optional)
     * @param fields list of fields separated by comma (optional)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Object> iserverMarketdataSnapshotGet(String conids, Integer since, String fields) throws ApiException {
        ApiResponse<List<Object>> resp = iserverMarketdataSnapshotGetWithHttpInfo(conids, since, fields);
        return resp.getData();
    }

    /**
     * Market Data
     * Get Market Data for the given conid(s). The endpoint will return by default bid, ask, last, change, change pct,
     * close, listing exchange. See response fields for a list of available fields that can be request via fields
     * argument. The endpoint /iserver/accounts must be called prior to /iserver/marketdata/snapshot. For derivative
     * contracts the endpoint /iserver/secdef/search must be called first.  If you call any other endpoints that relays
     * back market data for the same contract, such as /iserver/contract/rules then you must query market data again to
     * ensure all fields are properly returned.  First /snapshot endpoint call for given conid will initiate the market
     * data request.  To receive all available fields the /snapshot endpoint will need to be called several times. To
     * receive streaming market data the endpoint /ws can be used. Refer to [Streaming WebSocket
     * Data](https://interactivebrokers.github.io/cpwebapi/RealtimeSubscription.html) for details.
     *
     * @param conids list of conids separated by comma (required)
     * @param since  time period since which updates are required. uses epoch time with milliseconds. (optional)
     * @param fields list of fields separated by comma (optional)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Object>> iserverMarketdataSnapshotGetWithHttpInfo(String conids, Integer since,
            String fields) throws ApiException {
        com.squareup.okhttp.Call call = iserverMarketdataSnapshotGetValidateBeforeCall(conids, since, fields, null,
                null);
        Type localVarReturnType = new TypeToken<List<Object>>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call iserverMarketdataSnapshotGetValidateBeforeCall(String conids, Integer since,
            String fields, final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'conids' is set
        if (conids == null) {
            throw new ApiException(
                    "Missing the required parameter 'conids' when calling iserverMarketdataSnapshotGet(Async)");
        }


        com.squareup.okhttp.Call call = iserverMarketdataSnapshotGetCall(conids, since, fields, progressListener,
                progressRequestListener);
        return call;

    }

    /**
     * Build call for iserverMarketdataSnapshotGet.
     *
     * @param conids                  list of conids separated by comma (required)
     * @param since                   time period since which updates are required. uses epoch time with milliseconds.
     *                                (optional)
     * @param fields                  list of fields separated by comma (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call iserverMarketdataSnapshotGetCall(String conids, Integer since, String fields,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        final Object localVarPostBody = null;

        // create path and map variables
        final String localVarPath = "/iserver/marketdata/snapshot";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        final List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (conids != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("conids", conids));
        }
        if (since != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("since", since));
        }
        if (fields != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        final Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient()
                    .networkInterceptors()
                    .add(new com.squareup.okhttp.Interceptor() {
                        @Override
                        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
                                throws IOException {
                            com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                            return originalResponse.newBuilder()
                                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                                    .build();
                        }
                    });
        }

        String[] localVarAuthNames = new String[]{};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
                localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Market Data (asynchronously)
     * Get Market Data for the given conid(s). The endpoint will return by default bid, ask, last, change, change pct,
     * close, listing exchange. See response fields for a list of available fields that can be request via fields
     * argument. The endpoint /iserver/accounts must be called prior to /iserver/marketdata/snapshot. For derivative
     * contracts the endpoint /iserver/secdef/search must be called first.  If you call any other endpoints that relays
     * back market data for the same contract, such as /iserver/contract/rules then you must query market data again to
     * ensure all fields are properly returned.  First /snapshot endpoint call for given conid will initiate the market
     * data request.  To receive all available fields the /snapshot endpoint will need to be called several times. To
     * receive streaming market data the endpoint /ws can be used. Refer to [Streaming WebSocket
     * Data](https://interactivebrokers.github.io/cpwebapi/RealtimeSubscription.html) for details.
     *
     * @param conids   list of conids separated by comma (required)
     * @param since    time period since which updates are required. uses epoch time with milliseconds. (optional)
     * @param fields   list of fields separated by comma (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call iserverMarketdataSnapshotGetAsync(String conids, Integer since, String fields,
            final ApiCallback<List<Object>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = iserverMarketdataSnapshotGetValidateBeforeCall(conids, since, fields,
                progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Object>>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Market Data Cancel (All)
     * Cancel all market data request(s). To cancel market data for given conid, see
     * /iserver/marketdata/{conid}/unsubscribe.
     *
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BooleanConfirmed iserverMarketdataUnsubscribeallGet() throws ApiException {
        ApiResponse<BooleanConfirmed> resp = iserverMarketdataUnsubscribeallGetWithHttpInfo();
        return resp.getData();
    }

    /**
     * Market Data Cancel (All)
     * Cancel all market data request(s). To cancel market data for given conid, see
     * /iserver/marketdata/{conid}/unsubscribe.
     *
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BooleanConfirmed> iserverMarketdataUnsubscribeallGetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = iserverMarketdataUnsubscribeallGetValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<BooleanConfirmed>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call iserverMarketdataUnsubscribeallGetValidateBeforeCall(
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


        com.squareup.okhttp.Call call = iserverMarketdataUnsubscribeallGetCall(progressListener,
                progressRequestListener);
        return call;

    }

    /**
     * Build call for iserverMarketdataUnsubscribeallGet.
     *
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call iserverMarketdataUnsubscribeallGetCall(
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        final Object localVarPostBody = null;

        // create path and map variables
        final String localVarPath = "/iserver/marketdata/unsubscribeall";

        final List<Pair> localVarQueryParams = new ArrayList<Pair>();
        final List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        final Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient()
                    .networkInterceptors()
                    .add(new com.squareup.okhttp.Interceptor() {
                        @Override
                        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
                                throws IOException {
                            com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                            return originalResponse.newBuilder()
                                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                                    .build();
                        }
                    });
        }

        String[] localVarAuthNames = new String[]{};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
                localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Market Data Cancel (All) (asynchronously)
     * Cancel all market data request(s). To cancel market data for given conid, see
     * /iserver/marketdata/{conid}/unsubscribe.
     *
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call iserverMarketdataUnsubscribeallGetAsync(final ApiCallback<Object> callback)
            throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = iserverMarketdataUnsubscribeallGetValidateBeforeCall(progressListener,
                progressRequestListener);
        Type localVarReturnType = new TypeToken<BooleanConfirmed>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Market Data Snapshot (Beta)
     * Get a snapshot of Market Data for the given conid(s).See response for a list of available fields that can be
     * requested from the fields argument. Must be connected to a brokerage session before can query snapshot data.
     * First /snapshot endpoint call for given conid(s) will initiate the market data request, make an additional
     * request to receive field values back. To receive all available fields the /snapshot endpoint will need to be
     * called several times. To receive streaming market data the endpoint /ws can be used. Refer to [Streaming
     * WebSocket Data](https://interactivebrokers.github.io/cpwebapi/RealtimeSubscription.html) for details.
     *
     * @param conids List of conids comma separated. Optional exchange and instrument type can be specified.   * conid:
     *               IBKR Contract Identifier   * exchange: Exchange or venue   * instrType: Instrument Type supported
     *               values: CS (Stocks), OPT (Options), FUT (Futures), FOP (Future Options), WAR (Warrants), BOND
     *               (Bonds), FUND (Mutual Funds), CASH (Forex), CFD (Contract for difference), IND (Index)  (required)
     * @param fields list of fields separated by comma 31,84,85,86,88 (optional)
     * @return MarketData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MarketData mdSnapshotGet(String conids, String fields) throws ApiException {
        ApiResponse<MarketData> resp = mdSnapshotGetWithHttpInfo(conids, fields);
        return resp.getData();
    }

    /**
     * Market Data Snapshot (Beta)
     * Get a snapshot of Market Data for the given conid(s).See response for a list of available fields that can be
     * requested from the fields argument. Must be connected to a brokerage session before can query snapshot data.
     * First /snapshot endpoint call for given conid(s) will initiate the market data request, make an additional
     * request to receive field values back. To receive all available fields the /snapshot endpoint will need to be
     * called several times. To receive streaming market data the endpoint /ws can be used. Refer to [Streaming
     * WebSocket Data](https://interactivebrokers.github.io/cpwebapi/RealtimeSubscription.html) for details.
     *
     * @param conids List of conids comma separated. Optional exchange and instrument type can be specified.   * conid:
     *               IBKR Contract Identifier   * exchange: Exchange or venue   * instrType: Instrument Type supported
     *               values: CS (Stocks), OPT (Options), FUT (Futures), FOP (Future Options), WAR (Warrants), BOND
     *               (Bonds), FUND (Mutual Funds), CASH (Forex), CFD (Contract for difference), IND (Index)  (required)
     * @param fields list of fields separated by comma 31,84,85,86,88 (optional)
     * @return ApiResponse&lt;MarketData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MarketData> mdSnapshotGetWithHttpInfo(String conids, String fields) throws ApiException {
        com.squareup.okhttp.Call call = mdSnapshotGetValidateBeforeCall(conids, fields, null, null);
        Type localVarReturnType = new TypeToken<MarketData>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call mdSnapshotGetValidateBeforeCall(String conids, String fields,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'conids' is set
        if (conids == null) {
            throw new ApiException("Missing the required parameter 'conids' when calling mdSnapshotGet(Async)");
        }


        com.squareup.okhttp.Call call = mdSnapshotGetCall(conids, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Build call for mdSnapshotGet.
     *
     * @param conids                  List of conids comma separated. Optional exchange and instrument type can be
     *                                specified.   * conid: IBKR Contract Identifier   * exchange: Exchange or venue   *
     *                                instrType: Instrument Type supported values: CS (Stocks), OPT (Options), FUT
     *                                (Futures), FOP (Future Options), WAR (Warrants), BOND (Bonds), FUND (Mutual
     *                                Funds), CASH (Forex), CFD (Contract for difference), IND (Index)  (required)
     * @param fields                  list of fields separated by comma 31,84,85,86,88 (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call mdSnapshotGetCall(String conids, String fields,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        final Object localVarPostBody = null;

        // create path and map variables
        final String localVarPath = "/md/snapshot";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        final List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (conids != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("conids", conids));
        }
        if (fields != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        final Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient()
                    .networkInterceptors()
                    .add(new com.squareup.okhttp.Interceptor() {
                        @Override
                        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
                                throws IOException {
                            com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                            return originalResponse.newBuilder()
                                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                                    .build();
                        }
                    });
        }

        String[] localVarAuthNames = new String[]{};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
                localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Market Data Snapshot (Beta) (asynchronously)
     * Get a snapshot of Market Data for the given conid(s).See response for a list of available fields that can be
     * requested from the fields argument. Must be connected to a brokerage session before can query snapshot data.
     * First /snapshot endpoint call for given conid(s) will initiate the market data request, make an additional
     * request to receive field values back. To receive all available fields the /snapshot endpoint will need to be
     * called several times. To receive streaming market data the endpoint /ws can be used. Refer to [Streaming
     * WebSocket Data](https://interactivebrokers.github.io/cpwebapi/RealtimeSubscription.html) for details.
     *
     * @param conids   List of conids comma separated. Optional exchange and instrument type can be specified.   *
     *                 conid: IBKR Contract Identifier   * exchange: Exchange or venue   * instrType: Instrument Type
     *                 supported values: CS (Stocks), OPT (Options), FUT (Futures), FOP (Future Options), WAR
     *                 (Warrants), BOND (Bonds), FUND (Mutual Funds), CASH (Forex), CFD (Contract for difference), IND
     *                 (Index)  (required)
     * @param fields   list of fields separated by comma 31,84,85,86,88 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call mdSnapshotGetAsync(String conids, String fields,
            final ApiCallback<MarketData> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = mdSnapshotGetValidateBeforeCall(conids, fields, progressListener,
                progressRequestListener);
        Type localVarReturnType = new TypeToken<MarketData>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

}
