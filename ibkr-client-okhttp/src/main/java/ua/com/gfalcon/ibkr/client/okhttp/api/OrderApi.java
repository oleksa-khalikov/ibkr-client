/*
 * MIT License
 *
 * Copyright (c) 2015-2022 Oleksii Khalikov
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/*
 * Client Portal Web API
 * Client Poral Web API
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package ua.com.gfalcon.ibkr.client.okhttp.api;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.reflect.TypeToken;

import ua.com.gfalcon.ibkr.client.okhttp.ApiCallback;
import ua.com.gfalcon.ibkr.client.okhttp.ApiClient;
import ua.com.gfalcon.ibkr.client.okhttp.ApiException;
import ua.com.gfalcon.ibkr.client.okhttp.ApiResponse;
import ua.com.gfalcon.ibkr.client.okhttp.Configuration;
import ua.com.gfalcon.ibkr.client.okhttp.Pair;
import ua.com.gfalcon.ibkr.client.okhttp.ProgressRequestBody;
import ua.com.gfalcon.ibkr.client.okhttp.ProgressResponseBody;
import ua.com.gfalcon.ibkr.model.Body;
import ua.com.gfalcon.ibkr.model.Confirmation;
import ua.com.gfalcon.ibkr.model.ModifyOrder;
import ua.com.gfalcon.ibkr.model.OrderRequest;
import ua.com.gfalcon.ibkr.model.OrderStatus;
import ua.com.gfalcon.ibkr.model.OrdersRequest;

/**
 * Order api.
 */
public class OrderApi {

    private ApiClient apiClient;

    public OrderApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OrderApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Cancel Order
     * Cancels an open order. Must call /iserver/accounts endpoint prior to cancelling an order. Use
     * /iservers/account/orders endpoint to review open-order(s) and get latest order status.
     *
     * @param accountId account id, or fa group if deleting a group order (required)
     * @param orderId   Customer order id, use /iservers/account/orders endpoint to query orderId. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object iserverAccountAccountIdOrderOrderIdDelete(String accountId, String orderId) throws ApiException {
        ApiResponse<Object> resp = iserverAccountAccountIdOrderOrderIdDeleteWithHttpInfo(accountId, orderId);
        return resp.getData();
    }

    /**
     * Cancel Order
     * Cancels an open order. Must call /iserver/accounts endpoint prior to cancelling an order. Use
     * /iservers/account/orders endpoint to review open-order(s) and get latest order status.
     *
     * @param accountId account id, or fa group if deleting a group order (required)
     * @param orderId   Customer order id, use /iservers/account/orders endpoint to query orderId. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> iserverAccountAccountIdOrderOrderIdDeleteWithHttpInfo(String accountId, String orderId)
            throws ApiException {
        com.squareup.okhttp.Call call = iserverAccountAccountIdOrderOrderIdDeleteValidateBeforeCall(accountId, orderId,
                null, null);
        Type localVarReturnType = new TypeToken<Object>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call iserverAccountAccountIdOrderOrderIdDeleteValidateBeforeCall(String accountId,
            String orderId, final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException(
                    "Missing the required parameter 'accountId' when calling"
                            + " iserverAccountAccountIdOrderOrderIdDelete(Async)");
        }

        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException(
                    "Missing the required parameter 'orderId' when calling"
                            + " iserverAccountAccountIdOrderOrderIdDelete(Async)");
        }


        com.squareup.okhttp.Call call = iserverAccountAccountIdOrderOrderIdDeleteCall(accountId, orderId,
                progressListener, progressRequestListener);
        return call;

    }

    /**
     * Build call for iserverAccountAccountIdOrderOrderIdDelete.
     *
     * @param accountId               account id, or fa group if deleting a group order (required)
     * @param orderId                 Customer order id, use /iservers/account/orders endpoint to query orderId.
     *                                (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call iserverAccountAccountIdOrderOrderIdDeleteCall(String accountId, String orderId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        final Object localVarPostBody = null;

        // create path and map variables
        final String localVarPath = "/iserver/account/{accountId}/order/{orderId}"
                .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()))
                .replaceAll("\\{" + "orderId" + "\\}", apiClient.escapeString(orderId.toString()));

        final List<Pair> localVarQueryParams = new ArrayList<Pair>();
        final List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        final Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient()
                    .networkInterceptors()
                    .add(new com.squareup.okhttp.Interceptor() {
                        @Override
                        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
                                throws IOException {
                            com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                            return originalResponse.newBuilder()
                                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                                    .build();
                        }
                    });
        }

        String[] localVarAuthNames = new String[]{};
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams,
                localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Cancel Order (asynchronously)
     * Cancels an open order. Must call /iserver/accounts endpoint prior to cancelling an order. Use
     * /iservers/account/orders endpoint to review open-order(s) and get latest order status.
     *
     * @param accountId account id, or fa group if deleting a group order (required)
     * @param orderId   Customer order id, use /iservers/account/orders endpoint to query orderId. (required)
     * @param callback  The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call iserverAccountAccountIdOrderOrderIdDeleteAsync(String accountId, String orderId,
            final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = iserverAccountAccountIdOrderOrderIdDeleteValidateBeforeCall(accountId, orderId,
                progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Modify Order
     * Modifies an open order. Must call /iserver/accounts endpoint prior to modifying an order. Use
     * /iservers/account/orders endpoint to review open-order(s).
     *
     * @param accountId account id, or fa group if modifying a group order (required)
     * @param orderId   Customer order id, use /iservers/account/orders endpoint to query orderId. (required)
     * @param body      modify-order request (required)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Object> iserverAccountAccountIdOrderOrderIdPost(String accountId, String orderId, ModifyOrder body)
            throws ApiException {
        ApiResponse<List<Object>> resp = iserverAccountAccountIdOrderOrderIdPostWithHttpInfo(accountId, orderId, body);
        return resp.getData();
    }

    /**
     * Modify Order
     * Modifies an open order. Must call /iserver/accounts endpoint prior to modifying an order. Use
     * /iservers/account/orders endpoint to review open-order(s).
     *
     * @param accountId account id, or fa group if modifying a group order (required)
     * @param orderId   Customer order id, use /iservers/account/orders endpoint to query orderId. (required)
     * @param body      modify-order request (required)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Object>> iserverAccountAccountIdOrderOrderIdPostWithHttpInfo(String accountId,
            String orderId, ModifyOrder body) throws ApiException {
        com.squareup.okhttp.Call call = iserverAccountAccountIdOrderOrderIdPostValidateBeforeCall(accountId, orderId,
                body, null, null);
        Type localVarReturnType = new TypeToken<List<Object>>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call iserverAccountAccountIdOrderOrderIdPostValidateBeforeCall(String accountId,
            String orderId, ModifyOrder body, final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException(
                    "Missing the required parameter 'accountId' when calling "
                            + "iserverAccountAccountIdOrderOrderIdPost(Async)");
        }

        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException(
                    "Missing the required parameter 'orderId' when calling "
                            + "iserverAccountAccountIdOrderOrderIdPost(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException(
                    "Missing the required parameter 'body' when calling "
                            + "iserverAccountAccountIdOrderOrderIdPost(Async)");
        }


        com.squareup.okhttp.Call call = iserverAccountAccountIdOrderOrderIdPostCall(accountId, orderId, body,
                progressListener, progressRequestListener);
        return call;

    }

    /**
     * Build call for iserverAccountAccountIdOrderOrderIdPost.
     *
     * @param accountId               account id, or fa group if modifying a group order (required)
     * @param orderId                 Customer order id, use /iservers/account/orders endpoint to query orderId.
     *                                (required)
     * @param body                    modify-order request (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call iserverAccountAccountIdOrderOrderIdPostCall(String accountId, String orderId,
            ModifyOrder body, final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        final Object localVarPostBody = body;

        // create path and map variables
        final String localVarPath = "/iserver/account/{accountId}/order/{orderId}"
                .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()))
                .replaceAll("\\{" + "orderId" + "\\}", apiClient.escapeString(orderId.toString()));

        final List<Pair> localVarQueryParams = new ArrayList<Pair>();
        final List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        final Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient()
                    .networkInterceptors()
                    .add(new com.squareup.okhttp.Interceptor() {
                        @Override
                        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
                                throws IOException {
                            com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                            return originalResponse.newBuilder()
                                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                                    .build();
                        }
                    });
        }

        String[] localVarAuthNames = new String[]{};
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams,
                localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Modify Order (asynchronously)
     * Modifies an open order. Must call /iserver/accounts endpoint prior to modifying an order. Use
     * /iservers/account/orders endpoint to review open-order(s).
     *
     * @param accountId account id, or fa group if modifying a group order (required)
     * @param orderId   Customer order id, use /iservers/account/orders endpoint to query orderId. (required)
     * @param body      modify-order request (required)
     * @param callback  The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call iserverAccountAccountIdOrderOrderIdPostAsync(String accountId, String orderId,
            ModifyOrder body, final ApiCallback<List<Object>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = iserverAccountAccountIdOrderOrderIdPostValidateBeforeCall(accountId, orderId,
                body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Object>>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Place Order (Deprecated)
     * This endpoint is going to be deprecated, you can use /iserver/account/{accountId}/orders, just pass one order in
     * the array, the order structure will be same. Please note here, sometimes this endpoint alone can&#39;t make sure
     * you submit the order successfully, you could receive some questions in the response, you have to to answer them
     * in order to submit the order successfully. You can use \&quot;/iserver/reply/{replyid}\&quot; endpoint to answer
     * questions
     *
     * @param accountId account id (required)
     * @param body      order request info (required)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    @Deprecated
    public List<Object> iserverAccountAccountIdOrderPost(String accountId, OrderRequest body) throws ApiException {
        ApiResponse<List<Object>> resp = iserverAccountAccountIdOrderPostWithHttpInfo(accountId, body);
        return resp.getData();
    }

    /**
     * Place Order (Deprecated)
     * This endpoint is going to be deprecated, you can use /iserver/account/{accountId}/orders, just pass one order in
     * the array, the order structure will be same. Please note here, sometimes this endpoint alone can&#39;t make sure
     * you submit the order successfully, you could receive some questions in the response, you have to to answer them
     * in order to submit the order successfully. You can use \&quot;/iserver/reply/{replyid}\&quot; endpoint to answer
     * questions
     *
     * @param accountId account id (required)
     * @param body      order request info (required)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    @Deprecated
    public ApiResponse<List<Object>> iserverAccountAccountIdOrderPostWithHttpInfo(String accountId, OrderRequest body)
            throws ApiException {
        com.squareup.okhttp.Call call = iserverAccountAccountIdOrderPostValidateBeforeCall(accountId, body, null, null);
        Type localVarReturnType = new TypeToken<List<Object>>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call iserverAccountAccountIdOrderPostValidateBeforeCall(String accountId,
            OrderRequest body, final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException(
                    "Missing the required parameter 'accountId' when calling iserverAccountAccountIdOrderPost(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException(
                    "Missing the required parameter 'body' when calling iserverAccountAccountIdOrderPost(Async)");
        }


        com.squareup.okhttp.Call call = iserverAccountAccountIdOrderPostCall(accountId, body, progressListener,
                progressRequestListener);
        return call;

    }

    /**
     * Build call for iserverAccountAccountIdOrderPost.
     *
     * @param accountId               account id (required)
     * @param body                    order request info (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    @Deprecated
    public com.squareup.okhttp.Call iserverAccountAccountIdOrderPostCall(String accountId, OrderRequest body,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        final Object localVarPostBody = body;

        // create path and map variables
        final String localVarPath = "/iserver/account/{accountId}/order"
                .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()));

        final List<Pair> localVarQueryParams = new ArrayList<Pair>();
        final List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        final Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient()
                    .networkInterceptors()
                    .add(new com.squareup.okhttp.Interceptor() {
                        @Override
                        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
                                throws IOException {
                            com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                            return originalResponse.newBuilder()
                                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                                    .build();
                        }
                    });
        }

        String[] localVarAuthNames = new String[]{};
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams,
                localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Place Order (Deprecated) (asynchronously)
     * This endpoint is going to be deprecated, you can use /iserver/account/{accountId}/orders, just pass one order in
     * the array, the order structure will be same. Please note here, sometimes this endpoint alone can&#39;t make sure
     * you submit the order successfully, you could receive some questions in the response, you have to to answer them
     * in order to submit the order successfully. You can use \&quot;/iserver/reply/{replyid}\&quot; endpoint to answer
     * questions
     *
     * @param accountId account id (required)
     * @param body      order request info (required)
     * @param callback  The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated use /iserver/account/{accountId}/orders instead.
     */
    @Deprecated
    public com.squareup.okhttp.Call iserverAccountAccountIdOrderPostAsync(String accountId, OrderRequest body,
            final ApiCallback<List<Object>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = iserverAccountAccountIdOrderPostValidateBeforeCall(accountId, body,
                progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Object>>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Preview Order (Deprecated)
     * This end-point is going to be deprecated, you can use /iserver/account/{accountId}/orders/whatif, just pass one
     * order in the array, the order structure will be same. This endpoint allows you to preview order without actually
     * submitting the order and you can get commission information in the response.
     *
     * @param accountId account id (required)
     * @param body      order info (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated use /iserver/account/{accountId}/orders/whatif instead.
     */
    @Deprecated
    public Object iserverAccountAccountIdOrderWhatifPost(String accountId, OrderRequest body) throws ApiException {
        ApiResponse<Object> resp = iserverAccountAccountIdOrderWhatifPostWithHttpInfo(accountId, body);
        return resp.getData();
    }

    /**
     * Preview Order (Deprecated)
     * This end-point is going to be deprecated, you can use /iserver/account/{accountId}/orders/whatif, just pass one
     * order in the array, the order structure will be same. This endpoint allows you to preview order without actually
     * submitting the order and you can get commission information in the response.
     *
     * @param accountId account id (required)
     * @param body      order info (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated use /iserver/account/{accountId}/orders/whatif instead.
     */
    @Deprecated
    public ApiResponse<Object> iserverAccountAccountIdOrderWhatifPostWithHttpInfo(String accountId, OrderRequest body)
            throws ApiException {
        com.squareup.okhttp.Call call = iserverAccountAccountIdOrderWhatifPostValidateBeforeCall(accountId, body, null,
                null);
        Type localVarReturnType = new TypeToken<Object>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call iserverAccountAccountIdOrderWhatifPostValidateBeforeCall(String accountId,
            OrderRequest body, final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException(
                    "Missing the required parameter 'accountId' when calling"
                            + " iserverAccountAccountIdOrderWhatifPost(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException(
                    "Missing the required parameter 'body' when calling iserverAccountAccountIdOrderWhatifPost(Async)");
        }


        com.squareup.okhttp.Call call = iserverAccountAccountIdOrderWhatifPostCall(accountId, body, progressListener,
                progressRequestListener);
        return call;

    }

    /**
     * Build call for iserverAccountAccountIdOrderWhatifPost.
     *
     * @param accountId               account id (required)
     * @param body                    order info (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated use /iserver/account/{accountId}/orders/whatif instead.
     */
    @Deprecated
    public com.squareup.okhttp.Call iserverAccountAccountIdOrderWhatifPostCall(String accountId, OrderRequest body,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        final Object localVarPostBody = body;

        // create path and map variables
        final String localVarPath = "/iserver/account/{accountId}/order/whatif"
                .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()));

        final List<Pair> localVarQueryParams = new ArrayList<Pair>();
        final List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        final Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient()
                    .networkInterceptors()
                    .add(new com.squareup.okhttp.Interceptor() {
                        @Override
                        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
                                throws IOException {
                            com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                            return originalResponse.newBuilder()
                                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                                    .build();
                        }
                    });
        }

        String[] localVarAuthNames = new String[]{};
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams,
                localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Preview Order (Deprecated) (asynchronously).
     * This end-point is going to be deprecated, you can use /iserver/account/{accountId}/orders/whatif, just pass one
     * order in the array, the order structure will be same. This endpoint allows you to preview order without actually
     * submitting the order and you can get commission information in the response.
     *
     * @param accountId account id (required)
     * @param body      order info (required)
     * @param callback  The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated use /iserver/account/{accountId}/orders/whatif instead.
     */
    @Deprecated
    public com.squareup.okhttp.Call iserverAccountAccountIdOrderWhatifPostAsync(String accountId, OrderRequest body,
            final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = iserverAccountAccountIdOrderWhatifPostValidateBeforeCall(accountId, body,
                progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Place Orders
     * When connected to an IServer Brokerage Session, this endpoint will allow you to submit orders.  CP WEB API
     * supports various advanced orderTypes, for additional details and examples refer to [IBKR Quant
     * Blog](https://www.tradersinsight.news/category/ibkr-quant-news/programming_languages/rest-development/).   *
     * Bracket - Attach additional opposite-side order(s) by using a single **cOID** sent with the parent and set the
     * same value for **parentId** in each child order(s).   * Cash Quantity -  Send orders using monetary value by
     * specifying **cashQty** instead of quantity, e.g. cashQty: 200. The endpoint /iserver/contract/rules returns list
     * of valid orderTypes in cqtTypes.   * Currency Conversion - Convert cash from one currency to another by including
     * **isCcyConv** &#x3D; **true**. To specify the cash quantity use **fxQTY** instead of quantity, e.g. fxQTY: 100.
     * * Fractional - Contracts that support fractional shares can be traded by specifying **quantity** as a float, e.g.
     * quantity: 0.001. The endpoint /iserver/contract/rules returns a list of valid orderTypes in fraqTypes.   * IB
     * Algos - Attached user-defined settings to your trades by using any of IBKR&#39;s Algo Orders. Use the endpoint
     * /iserver/contract/{conid}/algos to identify the available strategies for a contract.   * One-Cancels-All (OCA) -
     * Group multiple unrelated orders by passing order request info in an array and including **isSingleGroup &#x3D;
     * true** for each order. All orders will be assigned the same oca_group_id.
     *
     * @param accountId account id (required)
     * @param body      order request info (required)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Object> iserverAccountAccountIdOrdersPost(String accountId, OrdersRequest body) throws ApiException {
        ApiResponse<List<Object>> resp = iserverAccountAccountIdOrdersPostWithHttpInfo(accountId, body);
        return resp.getData();
    }

    /**
     * Place Orders
     * When connected to an IServer Brokerage Session, this endpoint will allow you to submit orders.  CP WEB API
     * supports various advanced orderTypes, for additional details and examples refer to [IBKR Quant
     * Blog](https://www.tradersinsight.news/category/ibkr-quant-news/programming_languages/rest-development/).   *
     * Bracket - Attach additional opposite-side order(s) by using a single **cOID** sent with the parent and set the
     * same value for **parentId** in each child order(s).   * Cash Quantity -  Send orders using monetary value by
     * specifying **cashQty** instead of quantity, e.g. cashQty: 200. The endpoint /iserver/contract/rules returns list
     * of valid orderTypes in cqtTypes.   * Currency Conversion - Convert cash from one currency to another by including
     * **isCcyConv** &#x3D; **true**. To specify the cash quantity use **fxQTY** instead of quantity, e.g. fxQTY: 100.
     * * Fractional - Contracts that support fractional shares can be traded by specifying **quantity** as a float, e.g.
     * quantity: 0.001. The endpoint /iserver/contract/rules returns a list of valid orderTypes in fraqTypes.   * IB
     * Algos - Attached user-defined settings to your trades by using any of IBKR&#39;s Algo Orders. Use the endpoint
     * /iserver/contract/{conid}/algos to identify the available strategies for a contract.   * One-Cancels-All (OCA) -
     * Group multiple unrelated orders by passing order request info in an array and including **isSingleGroup &#x3D;
     * true** for each order. All orders will be assigned the same oca_group_id.
     *
     * @param accountId account id (required)
     * @param body      order request info (required)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Object>> iserverAccountAccountIdOrdersPostWithHttpInfo(String accountId, OrdersRequest body)
            throws ApiException {
        com.squareup.okhttp.Call call = iserverAccountAccountIdOrdersPostValidateBeforeCall(accountId, body, null,
                null);
        Type localVarReturnType = new TypeToken<List<Object>>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call iserverAccountAccountIdOrdersPostValidateBeforeCall(String accountId, OrdersRequest body,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException(
                    "Missing the required parameter 'accountId' when calling iserverAccountAccountIdOrdersPost(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException(
                    "Missing the required parameter 'body' when calling iserverAccountAccountIdOrdersPost(Async)");
        }


        com.squareup.okhttp.Call call = iserverAccountAccountIdOrdersPostCall(accountId, body, progressListener,
                progressRequestListener);
        return call;

    }

    /**
     * Build call for iserverAccountAccountIdOrdersPost.
     *
     * @param accountId               account id (required)
     * @param body                    order request info (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call iserverAccountAccountIdOrdersPostCall(String accountId, OrdersRequest body,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        final OrdersRequest localVarPostBody = body;

        // create path and map variables
        final String localVarPath = "/iserver/account/{accountId}/orders".replaceAll("\\{" + "accountId" + "\\}",
                apiClient.escapeString(accountId.toString()));

        final List<Pair> localVarQueryParams = new ArrayList<Pair>();
        final List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        final Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient()
                    .networkInterceptors()
                    .add(new com.squareup.okhttp.Interceptor() {
                        @Override
                        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
                                throws IOException {
                            com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                            return originalResponse.newBuilder()
                                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                                    .build();
                        }
                    });
        }

        String[] localVarAuthNames = new String[]{};
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams,
                localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Place Orders (asynchronously)
     * When connected to an IServer Brokerage Session, this endpoint will allow you to submit orders.  CP WEB API
     * supports various advanced orderTypes, for additional details and examples refer to [IBKR Quant
     * Blog](https://www.tradersinsight.news/category/ibkr-quant-news/programming_languages/rest-development/).   *
     * Bracket - Attach additional opposite-side order(s) by using a single **cOID** sent with the parent and set the
     * same value for **parentId** in each child order(s).   * Cash Quantity -  Send orders using monetary value by
     * specifying **cashQty** instead of quantity, e.g. cashQty: 200. The endpoint /iserver/contract/rules returns list
     * of valid orderTypes in cqtTypes.   * Currency Conversion - Convert cash from one currency to another by including
     * **isCcyConv** &#x3D; **true**. To specify the cash quantity use **fxQTY** instead of quantity, e.g. fxQTY: 100.
     * * Fractional - Contracts that support fractional shares can be traded by specifying **quantity** as a float, e.g.
     * quantity: 0.001. The endpoint /iserver/contract/rules returns a list of valid orderTypes in fraqTypes.   * IB
     * Algos - Attached user-defined settings to your trades by using any of IBKR&#39;s Algo Orders. Use the endpoint
     * /iserver/contract/{conid}/algos to identify the available strategies for a contract.   * One-Cancels-All (OCA) -
     * Group multiple unrelated orders by passing order request info in an array and including **isSingleGroup &#x3D;
     * true** for each order. All orders will be assigned the same oca_group_id.
     *
     * @param accountId account id (required)
     * @param body      order request info (required)
     * @param callback  The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call iserverAccountAccountIdOrdersPostAsync(String accountId, OrdersRequest body,
            final ApiCallback<List<Object>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = iserverAccountAccountIdOrdersPostValidateBeforeCall(accountId, body,
                progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Object>>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Preview Orders
     * This endpoint allows you to preview order without actually submitting the order and you can get commission
     * information in the response. Also supports bracket orders.
     *
     * @param accountId account id (required)
     * @param body      order info (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object iserverAccountAccountIdOrdersWhatifPost(String accountId, OrdersRequest body) throws ApiException {
        ApiResponse<Object> resp = iserverAccountAccountIdOrdersWhatifPostWithHttpInfo(accountId, body);
        return resp.getData();
    }

    /**
     * Preview Orders
     * This endpoint allows you to preview order without actually submitting the order and you can get commission
     * information in the response. Also supports bracket orders.
     *
     * @param accountId account id (required)
     * @param body      order info (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> iserverAccountAccountIdOrdersWhatifPostWithHttpInfo(String accountId, OrdersRequest body)
            throws ApiException {
        com.squareup.okhttp.Call call = iserverAccountAccountIdOrdersWhatifPostValidateBeforeCall(accountId, body, null,
                null);
        Type localVarReturnType = new TypeToken<Object>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call iserverAccountAccountIdOrdersWhatifPostValidateBeforeCall(String accountId,
            OrdersRequest body, final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException(
                    "Missing the required parameter 'accountId' when calling"
                            + " iserverAccountAccountIdOrdersWhatifPost(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException(
                    "Missing the required parameter 'body' when calling"
                            + " iserverAccountAccountIdOrdersWhatifPost(Async)");
        }


        com.squareup.okhttp.Call call = iserverAccountAccountIdOrdersWhatifPostCall(accountId, body, progressListener,
                progressRequestListener);
        return call;

    }

    /**
     * Build call for iserverAccountAccountIdOrdersWhatifPost.
     *
     * @param accountId               account id (required)
     * @param body                    order info (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call iserverAccountAccountIdOrdersWhatifPostCall(String accountId, OrdersRequest body,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        final OrdersRequest localVarPostBody = body;

        // create path and map variables
        final String localVarPath = "/iserver/account/{accountId}/orders/whatif"
                .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()));

        final List<Pair> localVarQueryParams = new ArrayList<Pair>();
        final List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        final Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient()
                    .networkInterceptors()
                    .add(new com.squareup.okhttp.Interceptor() {
                        @Override
                        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
                                throws IOException {
                            com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                            return originalResponse.newBuilder()
                                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                                    .build();
                        }
                    });
        }

        String[] localVarAuthNames = new String[]{};
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams,
                localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Preview Orders (asynchronously)
     * This endpoint allows you to preview order without actually submitting the order and you can get commission
     * information in the response. Also supports bracket orders.
     *
     * @param accountId account id (required)
     * @param body      order info (required)
     * @param callback  The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call iserverAccountAccountIdOrdersWhatifPostAsync(String accountId, OrdersRequest body,
            final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = iserverAccountAccountIdOrdersWhatifPostValidateBeforeCall(accountId, body,
                progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Order Status.
     *
     * @param orderId Customer order id, use /iservers/account/orders endpoint to query orderId. (required)
     * @return OrderStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OrderStatus iserverAccountOrderStatusOrderIdGet(String orderId) throws ApiException {
        ApiResponse<OrderStatus> resp = iserverAccountOrderStatusOrderIdGetWithHttpInfo(orderId);
        return resp.getData();
    }

    /**
     * Order Status.
     *
     * @param orderId Customer order id, use /iservers/account/orders endpoint to query orderId. (required)
     * @return ApiResponse&lt;OrderStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OrderStatus> iserverAccountOrderStatusOrderIdGetWithHttpInfo(String orderId)
            throws ApiException {
        com.squareup.okhttp.Call call = iserverAccountOrderStatusOrderIdGetValidateBeforeCall(orderId, null, null);
        Type localVarReturnType = new TypeToken<OrderStatus>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call iserverAccountOrderStatusOrderIdGetValidateBeforeCall(String orderId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException(
                    "Missing the required parameter 'orderId' when calling iserverAccountOrderStatusOrderIdGet(Async)");
        }


        com.squareup.okhttp.Call call = iserverAccountOrderStatusOrderIdGetCall(orderId, progressListener,
                progressRequestListener);
        return call;

    }

    /**
     * Build call for iserverAccountOrderStatusOrderIdGet.
     *
     * @param orderId                 Customer order id, use /iservers/account/orders endpoint to query orderId.
     *                                (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call iserverAccountOrderStatusOrderIdGetCall(String orderId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        final Object localVarPostBody = null;

        // create path and map variables
        final String localVarPath = "/iserver/account/order/status/{orderId}"
                .replaceAll("\\{" + "orderId" + "\\}", apiClient.escapeString(orderId.toString()));

        final List<Pair> localVarQueryParams = new ArrayList<Pair>();
        final List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        final Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient()
                    .networkInterceptors()
                    .add(new com.squareup.okhttp.Interceptor() {
                        @Override
                        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
                                throws IOException {
                            com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                            return originalResponse.newBuilder()
                                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                                    .build();
                        }
                    });
        }

        String[] localVarAuthNames = new String[]{};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
                localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Order Status (asynchronously).
     *
     * @param orderId  Customer order id, use /iservers/account/orders endpoint to query orderId. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call iserverAccountOrderStatusOrderIdGetAsync(String orderId,
            final ApiCallback<OrderStatus> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = iserverAccountOrderStatusOrderIdGetValidateBeforeCall(orderId, progressListener,
                progressRequestListener);
        Type localVarReturnType = new TypeToken<OrderStatus>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Place Orders for FA
     * Financial Advisors can use this endpoint to place an order for a specified group. To place an order for a
     * specified account use the endpoint /iserver/account/{accountId}/order. More information about groups can be found
     * in the [TWS Users&#39;
     * Guide:](https://guides.interactivebrokers.com/twsguide/twsguide.htm#usersguidebook/financialadvisors/create_an_account_group_for_share_allocation.htm).
     *
     * @param faGroup financial advisor group (required)
     * @param body    order request info (required)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Object> iserverAccountOrdersFaGroupPost(String faGroup, OrderRequest body) throws ApiException {
        ApiResponse<List<Object>> resp = iserverAccountOrdersFaGroupPostWithHttpInfo(faGroup, body);
        return resp.getData();
    }

    /**
     * Place Orders for FA
     * Financial Advisors can use this endpoint to place an order for a specified group. To place an order for a
     * specified account use the endpoint /iserver/account/{accountId}/order. More information about groups can be found
     * in the [TWS Users&#39;
     * Guide:](https://guides.interactivebrokers.com/twsguide/twsguide.htm#usersguidebook/financialadvisors/create_an_account_group_for_share_allocation.htm).
     *
     * @param faGroup financial advisor group (required)
     * @param body    order request info (required)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Object>> iserverAccountOrdersFaGroupPostWithHttpInfo(String faGroup, OrderRequest body)
            throws ApiException {
        com.squareup.okhttp.Call call = iserverAccountOrdersFaGroupPostValidateBeforeCall(faGroup, body, null, null);
        Type localVarReturnType = new TypeToken<List<Object>>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call iserverAccountOrdersFaGroupPostValidateBeforeCall(String faGroup,
            OrderRequest body, final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'faGroup' is set
        if (faGroup == null) {
            throw new ApiException(
                    "Missing the required parameter 'faGroup' when calling iserverAccountOrdersFaGroupPost(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException(
                    "Missing the required parameter 'body' when calling iserverAccountOrdersFaGroupPost(Async)");
        }


        com.squareup.okhttp.Call call = iserverAccountOrdersFaGroupPostCall(faGroup, body, progressListener,
                progressRequestListener);
        return call;

    }

    /**
     * Build call for iserverAccountOrdersFaGroupPost.
     *
     * @param faGroup                 financial advisor group (required)
     * @param body                    order request info (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call iserverAccountOrdersFaGroupPostCall(String faGroup, OrderRequest body,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        final Object localVarPostBody = body;

        // create path and map variables
        final String localVarPath = "/iserver/account/orders/{faGroup}".replaceAll("\\{" + "faGroup" + "\\}",
                apiClient.escapeString(faGroup.toString()));

        final List<Pair> localVarQueryParams = new ArrayList<Pair>();
        final List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        final Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient()
                    .networkInterceptors()
                    .add(new com.squareup.okhttp.Interceptor() {
                        @Override
                        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
                                throws IOException {
                            com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                            return originalResponse.newBuilder()
                                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                                    .build();
                        }
                    });
        }

        String[] localVarAuthNames = new String[]{};
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams,
                localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Place Orders for FA (asynchronously)
     * Financial Advisors can use this endpoint to place an order for a specified group. To place an order for a
     * specified account use the endpoint /iserver/account/{accountId}/order. More information about groups can be found
     * in the [TWS Users&#39;
     * Guide:](https://guides.interactivebrokers.com/twsguide/twsguide.htm#usersguidebook/financialadvisors/create_an_account_group_for_share_allocation.htm).
     *
     * @param faGroup  financial advisor group (required)
     * @param body     order request info (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call iserverAccountOrdersFaGroupPostAsync(String faGroup, OrderRequest body,
            final ApiCallback<List<Object>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = iserverAccountOrdersFaGroupPostValidateBeforeCall(faGroup, body,
                progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Object>>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Live Orders
     * The endpoint is meant to be used in polling mode, e.g. requesting every x seconds. The response will contain two
     * objects, one is notification, the other is orders. Orders is the list of live orders (cancelled, filled,
     * submitted). Notifications contains information about execute orders as they happen, see status field. To receive
     * streaming live orders the endpoint /ws can be used. Refer to [Streaming WebSocket
     * Data](https://interactivebrokers.github.io/cpwebapi/RealtimeSubscription.html) for details.
     *
     * @param body an array of filters (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object iserverAccountOrdersGet(Body body) throws ApiException {
        ApiResponse<Object> resp = iserverAccountOrdersGetWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Live Orders
     * The endpoint is meant to be used in polling mode, e.g. requesting every x seconds. The response will contain two
     * objects, one is notification, the other is orders. Orders is the list of live orders (cancelled, filled,
     * submitted). Notifications contains information about execute orders as they happen, see status field. To receive
     * streaming live orders the endpoint /ws can be used. Refer to [Streaming WebSocket
     * Data](https://interactivebrokers.github.io/cpwebapi/RealtimeSubscription.html) for details.
     *
     * @param body an array of filters (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> iserverAccountOrdersGetWithHttpInfo(Body body) throws ApiException {
        com.squareup.okhttp.Call call = iserverAccountOrdersGetValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<Object>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call iserverAccountOrdersGetValidateBeforeCall(Body body,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


        com.squareup.okhttp.Call call = iserverAccountOrdersGetCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Build call for iserverAccountOrdersGet.
     *
     * @param body                    an array of filters (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call iserverAccountOrdersGetCall(Body body,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        final Object localVarPostBody = body;

        // create path and map variables
        final String localVarPath = "/iserver/account/orders";

        final List<Pair> localVarQueryParams = new ArrayList<Pair>();
        final List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        final Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient()
                    .networkInterceptors()
                    .add(new com.squareup.okhttp.Interceptor() {
                        @Override
                        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
                                throws IOException {
                            com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                            return originalResponse.newBuilder()
                                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                                    .build();
                        }
                    });
        }

        String[] localVarAuthNames = new String[]{};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
                localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Live Orders (asynchronously)
     * The endpoint is meant to be used in polling mode, e.g. requesting every x seconds. The response will contain two
     * objects, one is notification, the other is orders. Orders is the list of live orders (cancelled, filled,
     * submitted). Notifications contains information about execute orders as they happen, see status field. To receive
     * streaming live orders the endpoint /ws can be used. Refer to [Streaming WebSocket
     * Data](https://interactivebrokers.github.io/cpwebapi/RealtimeSubscription.html) for details.
     *
     * @param body     an array of filters (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call iserverAccountOrdersGetAsync(Body body, final ApiCallback<Object> callback)
            throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = iserverAccountOrdersGetValidateBeforeCall(body, progressListener,
                progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Place Order Reply.
     * Reply to questions when placing orders and submit orders
     *
     * @param replyid Please use the \&quot;id\&quot; from the response of \&quot;Place Order\&quot; endpoint (required)
     * @param body    Answer to question (required)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Object> iserverReplyReplyidPost(String replyid, Confirmation body) throws ApiException {
        ApiResponse<List<Object>> resp = iserverReplyReplyidPostWithHttpInfo(replyid, body);
        return resp.getData();
    }

    /**
     * Place Order Reply.
     * Reply to questions when placing orders and submit orders
     *
     * @param replyid Please use the \&quot;id\&quot; from the response of \&quot;Place Order\&quot; endpoint (required)
     * @param body    Answer to question (required)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Object>> iserverReplyReplyidPostWithHttpInfo(String replyid, Confirmation body)
            throws ApiException {
        com.squareup.okhttp.Call call = iserverReplyReplyidPostValidateBeforeCall(replyid, body, null, null);
        Type localVarReturnType = new TypeToken<List<Object>>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call iserverReplyReplyidPostValidateBeforeCall(String replyid, Confirmation body,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'replyid' is set
        if (replyid == null) {
            throw new ApiException(
                    "Missing the required parameter 'replyid' when calling iserverReplyReplyidPost(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling iserverReplyReplyidPost(Async)");
        }


        com.squareup.okhttp.Call call = iserverReplyReplyidPostCall(replyid, body, progressListener,
                progressRequestListener);
        return call;

    }

    /**
     * Build call for iserverReplyReplyidPost.
     *
     * @param replyid                 Please use the \&quot;id\&quot; from the response of \&quot;Place Order\&quot;
     *                                endpoint (required)
     * @param body                    Answer to question (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call iserverReplyReplyidPostCall(String replyid, Confirmation body,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        final Confirmation localVarPostBody = body;

        // create path and map variables
        final String localVarPath = "/iserver/reply/{replyid}".replaceAll("\\{" + "replyid" + "\\}",
                apiClient.escapeString(replyid.toString()));

        final List<Pair> localVarQueryParams = new ArrayList<Pair>();
        final List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        final Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient()
                    .networkInterceptors()
                    .add(new com.squareup.okhttp.Interceptor() {
                        @Override
                        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
                                throws IOException {
                            com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                            return originalResponse.newBuilder()
                                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                                    .build();
                        }
                    });
        }

        String[] localVarAuthNames = new String[]{};
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams,
                localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Place Order Reply (asynchronously).
     * Reply to questions when placing orders and submit orders
     *
     * @param replyid  Please use the \&quot;id\&quot; from the response of \&quot;Place Order\&quot; endpoint
     *                 (required)
     * @param body     Answer to question (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call iserverReplyReplyidPostAsync(String replyid, Confirmation body,
            final ApiCallback<List<Object>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = iserverReplyReplyidPostValidateBeforeCall(replyid, body, progressListener,
                progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Object>>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

}
