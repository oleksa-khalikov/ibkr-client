/*
 *   Copyright 2016-2022 Oleksii V. KHALIKOV
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

/*
 * Client Portal Web API
 * Client Poral Web API
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package ua.com.gfalcon.ibkr.client.okhttp.api;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.reflect.TypeToken;

import ua.com.gfalcon.ibkr.client.okhttp.ApiCallback;
import ua.com.gfalcon.ibkr.client.okhttp.ApiClient;
import ua.com.gfalcon.ibkr.client.okhttp.ApiException;
import ua.com.gfalcon.ibkr.client.okhttp.ApiResponse;
import ua.com.gfalcon.ibkr.client.okhttp.Configuration;
import ua.com.gfalcon.ibkr.client.okhttp.Pair;
import ua.com.gfalcon.ibkr.client.okhttp.ProgressRequestBody;
import ua.com.gfalcon.ibkr.client.okhttp.ProgressResponseBody;
import ua.com.gfalcon.ibkr.model.HistoryResult;

/**
 * MarketData Beta Api.
 */
public class MarketDataBetaApi {

    private ApiClient apiClient;

    public MarketDataBetaApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MarketDataBetaApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Market Data History.
     * Using direct to market data farm connection, will provide a list of historical market data for a given conid
     *
     * @param conid      contract id (required)
     * @param period     Time period for history request.    * min: Minutes   * h: Hours   * d: Days   * w: Weeks   * m:
     *                   Months   * y: Years  (required)
     * @param bar        Duration of time for each candlestick bar.   * min: Minutes   * h: Hours   * d: Days   * w:
     *                   Weeks   * m: Months  (optional)
     * @param outsideRth For contracts that support it, will determine if history data includes outside of regular
     *                   trading hours. (optional)
     * @return HistoryResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HistoryResult hmdsHistoryGet(Integer conid, String period, String bar, Boolean outsideRth)
            throws ApiException {
        ApiResponse<HistoryResult> resp = hmdsHistoryGetWithHttpInfo(conid, period, bar, outsideRth);
        return resp.getData();
    }

    /**
     * Market Data History.
     * Using direct to market data farm connection, will provide a list of historical market data for a given conid
     *
     * @param conid      contract id (required)
     * @param period     Time period for history request.    * min: Minutes   * h: Hours   * d: Days   * w: Weeks   * m:
     *                   Months   * y: Years  (required)
     * @param bar        Duration of time for each candlestick bar.   * min: Minutes   * h: Hours   * d: Days   * w:
     *                   Weeks   * m: Months  (optional)
     * @param outsideRth For contracts that support it, will determine if history data includes outside of regular
     *                   trading hours. (optional)
     * @return ApiResponse&lt;HistoryResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HistoryResult> hmdsHistoryGetWithHttpInfo(Integer conid, String period, String bar,
            Boolean outsideRth) throws ApiException {
        com.squareup.okhttp.Call call = hmdsHistoryGetValidateBeforeCall(conid, period, bar, outsideRth, null, null);
        Type localVarReturnType = new TypeToken<HistoryResult>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call hmdsHistoryGetValidateBeforeCall(Integer conid, String period, String bar,
            Boolean outsideRth, final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'conid' is set
        if (conid == null) {
            throw new ApiException("Missing the required parameter 'conid' when calling hmdsHistoryGet(Async)");
        }

        // verify the required parameter 'period' is set
        if (period == null) {
            throw new ApiException("Missing the required parameter 'period' when calling hmdsHistoryGet(Async)");
        }


        com.squareup.okhttp.Call call = hmdsHistoryGetCall(conid, period, bar, outsideRth, progressListener,
                progressRequestListener);
        return call;

    }

    /**
     * Build call for hmdsHistoryGet.
     *
     * @param conid                   contract id (required)
     * @param period                  Time period for history request.    * min: Minutes   * h: Hours   * d: Days   * w:
     *                                Weeks   * m: Months   * y: Years  (required)
     * @param bar                     Duration of time for each candlestick bar.   * min: Minutes   * h: Hours   * d:
     *                                Days   * w: Weeks   * m: Months  (optional)
     * @param outsideRth              For contracts that support it, will determine if history data includes outside of
     *                                regular trading hours. (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call hmdsHistoryGetCall(Integer conid, String period, String bar, Boolean outsideRth,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        final Object localVarPostBody = null;

        // create path and map variables
        final String localVarPath = "/hmds/history";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        final List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (conid != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("conid", conid));
        }
        if (period != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("period", period));
        }
        if (bar != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("bar", bar));
        }
        if (outsideRth != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("outsideRth", outsideRth));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        final Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient()
                    .networkInterceptors()
                    .add(new com.squareup.okhttp.Interceptor() {
                        @Override
                        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
                                throws IOException {
                            com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                            return originalResponse.newBuilder()
                                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                                    .build();
                        }
                    });
        }

        String[] localVarAuthNames = new String[]{};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
                localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Market Data History (asynchronously).
     * Using direct to market data farm connection, will provide a list of historical market data for a given conid
     *
     * @param conid      contract id (required)
     * @param period     Time period for history request.    * min: Minutes   * h: Hours   * d: Days   * w: Weeks   * m:
     *                   Months   * y: Years  (required)
     * @param bar        Duration of time for each candlestick bar.   * min: Minutes   * h: Hours   * d: Days   * w:
     *                   Weeks   * m: Months  (optional)
     * @param outsideRth For contracts that support it, will determine if history data includes outside of regular
     *                   trading hours. (optional)
     * @param callback   The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call hmdsHistoryGetAsync(Integer conid, String period, String bar, Boolean outsideRth,
            final ApiCallback<HistoryResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = hmdsHistoryGetValidateBeforeCall(conid, period, bar, outsideRth,
                progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HistoryResult>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

}
